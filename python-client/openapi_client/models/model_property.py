# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.anon_id import AnonId
from openapi_client.models.model import Model
from typing import Optional, Set
from typing_extensions import Self

class ModelProperty(BaseModel):
    """
    ModelProperty
    """ # noqa: E501
    local_name: Optional[StrictStr] = Field(default=None, alias="localName")
    name_space: Optional[StrictStr] = Field(default=None, alias="nameSpace")
    var_property: Optional[StrictBool] = Field(default=None, alias="property")
    ordinal: Optional[StrictInt] = None
    id: Optional[AnonId] = None
    uri: Optional[StrictStr] = None
    stmt_term: Optional[Statement] = Field(default=None, alias="stmtTerm")
    resource: Optional[StrictBool] = None
    model: Optional[Model] = None
    literal: Optional[StrictBool] = None
    anon: Optional[StrictBool] = None
    uriresource: Optional[StrictBool] = None
    stmt_resource: Optional[StrictBool] = Field(default=None, alias="stmtResource")
    __properties: ClassVar[List[str]] = ["localName", "nameSpace", "property", "ordinal", "id", "uri", "stmtTerm", "resource", "model", "literal", "anon", "uriresource", "stmtResource"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelProperty from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stmt_term
        if self.stmt_term:
            _dict['stmtTerm'] = self.stmt_term.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict['model'] = self.model.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelProperty from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "localName": obj.get("localName"),
            "nameSpace": obj.get("nameSpace"),
            "property": obj.get("property"),
            "ordinal": obj.get("ordinal"),
            "id": AnonId.from_dict(obj["id"]) if obj.get("id") is not None else None,
            "uri": obj.get("uri"),
            "stmtTerm": Statement.from_dict(obj["stmtTerm"]) if obj.get("stmtTerm") is not None else None,
            "resource": obj.get("resource"),
            "model": Model.from_dict(obj["model"]) if obj.get("model") is not None else None,
            "literal": obj.get("literal"),
            "anon": obj.get("anon"),
            "uriresource": obj.get("uriresource"),
            "stmtResource": obj.get("stmtResource")
        })
        return _obj

from openapi_client.models.statement import Statement
# TODO: Rewrite to not use raise_errors
ModelProperty.model_rebuild(raise_errors=False)

