# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.agroportal_ontologies_config_dto import AgroportalOntologiesConfigDTO
from openapi_client.models.dashboard_config_dto import DashboardConfigDTO
from openapi_client.models.matomo_config_dto import MatomoConfigDTO
from openapi_client.models.route_dto import RouteDTO
from typing import Optional, Set
from typing_extensions import Self

class FrontConfigDTO(BaseModel):
    """
    FrontConfigDTO
    """ # noqa: E501
    path_prefix: StrictStr = Field(description="Application url path prefix", alias="pathPrefix")
    home_component: StrictStr = Field(description="Home component identifier", alias="homeComponent")
    not_found_component: StrictStr = Field(description="Not found component identifier", alias="notFoundComponent")
    header_component: StrictStr = Field(description="Header component identifier", alias="headerComponent")
    login_component: StrictStr = Field(description="Login component identifier", alias="loginComponent")
    menu_component: StrictStr = Field(description="Menu component identifier", alias="menuComponent")
    footer_component: StrictStr = Field(description="Footer component identifier", alias="footerComponent")
    routes: List[RouteDTO] = Field(description="List of configured routes")
    theme_module: Optional[StrictStr] = Field(default=None, description="Theme module identifier", alias="themeModule")
    theme_name: Optional[StrictStr] = Field(default=None, description="Theme module name", alias="themeName")
    open_id_authentication_uri: Optional[StrictStr] = Field(default=None, description="OpenID Authorization URI", alias="openIDAuthenticationURI")
    open_id_connection_title: Optional[StrictStr] = Field(default=None, alias="openIDConnectionTitle")
    saml_proxy_login_uri: Optional[StrictStr] = Field(default=None, alias="samlProxyLoginURI")
    saml_connection_title: Optional[StrictStr] = Field(default=None, alias="samlConnectionTitle")
    activate_reset_password: Optional[StrictBool] = Field(default=None, alias="activateResetPassword")
    geocoding_service: Optional[StrictStr] = Field(default=None, description="Geocoding service", alias="geocodingService")
    menu_exclusions: Optional[List[StrictStr]] = Field(default=None, description="Menu exclusions", alias="menuExclusions")
    version_label: Optional[StrictStr] = Field(default=None, description="Version label to use in the header", alias="versionLabel")
    application_name: Optional[StrictStr] = Field(default=None, description="Name of the application to display", alias="applicationName")
    connect_as_guest: Optional[StrictBool] = Field(default=None, description="Ability to be logged as guest", alias="connectAsGuest")
    dashboard: Optional[DashboardConfigDTO] = None
    gdpr_file_is_configured: Optional[StrictBool] = Field(default=None, description="GDPR PDF is configured", alias="gdprFileIsConfigured")
    matomo: Optional[MatomoConfigDTO] = None
    notification_message: Optional[Dict[str, StrictStr]] = Field(default=None, description="Notification message for the instance", alias="notificationMessage")
    notification_color_theme: Optional[StrictStr] = Field(default=None, description="Color theme for the notification message", alias="notificationColorTheme")
    notification_end_date: Optional[date] = Field(default=None, description="Date until which to send the notification", alias="notificationEndDate")
    agroportal: Optional[AgroportalOntologiesConfigDTO] = None
    __properties: ClassVar[List[str]] = ["pathPrefix", "homeComponent", "notFoundComponent", "headerComponent", "loginComponent", "menuComponent", "footerComponent", "routes", "themeModule", "themeName", "openIDAuthenticationURI", "openIDConnectionTitle", "samlProxyLoginURI", "samlConnectionTitle", "activateResetPassword", "geocodingService", "menuExclusions", "versionLabel", "applicationName", "connectAsGuest", "dashboard", "gdprFileIsConfigured", "matomo", "notificationMessage", "notificationColorTheme", "notificationEndDate", "agroportal"]

    @field_validator('version_label')
    def version_label_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEVELOP', 'RELEASE']):
            raise ValueError("must be one of enum values ('DEVELOP', 'RELEASE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FrontConfigDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in routes (list)
        _items = []
        if self.routes:
            for _item_routes in self.routes:
                if _item_routes:
                    _items.append(_item_routes.to_dict())
            _dict['routes'] = _items
        # override the default output from pydantic by calling `to_dict()` of dashboard
        if self.dashboard:
            _dict['dashboard'] = self.dashboard.to_dict()
        # override the default output from pydantic by calling `to_dict()` of matomo
        if self.matomo:
            _dict['matomo'] = self.matomo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of agroportal
        if self.agroportal:
            _dict['agroportal'] = self.agroportal.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FrontConfigDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pathPrefix": obj.get("pathPrefix"),
            "homeComponent": obj.get("homeComponent"),
            "notFoundComponent": obj.get("notFoundComponent"),
            "headerComponent": obj.get("headerComponent"),
            "loginComponent": obj.get("loginComponent"),
            "menuComponent": obj.get("menuComponent"),
            "footerComponent": obj.get("footerComponent"),
            "routes": [RouteDTO.from_dict(_item) for _item in obj["routes"]] if obj.get("routes") is not None else None,
            "themeModule": obj.get("themeModule"),
            "themeName": obj.get("themeName"),
            "openIDAuthenticationURI": obj.get("openIDAuthenticationURI"),
            "openIDConnectionTitle": obj.get("openIDConnectionTitle"),
            "samlProxyLoginURI": obj.get("samlProxyLoginURI"),
            "samlConnectionTitle": obj.get("samlConnectionTitle"),
            "activateResetPassword": obj.get("activateResetPassword"),
            "geocodingService": obj.get("geocodingService"),
            "menuExclusions": obj.get("menuExclusions"),
            "versionLabel": obj.get("versionLabel"),
            "applicationName": obj.get("applicationName"),
            "connectAsGuest": obj.get("connectAsGuest"),
            "dashboard": DashboardConfigDTO.from_dict(obj["dashboard"]) if obj.get("dashboard") is not None else None,
            "gdprFileIsConfigured": obj.get("gdprFileIsConfigured"),
            "matomo": MatomoConfigDTO.from_dict(obj["matomo"]) if obj.get("matomo") is not None else None,
            "notificationMessage": obj.get("notificationMessage"),
            "notificationColorTheme": obj.get("notificationColorTheme"),
            "notificationEndDate": obj.get("notificationEndDate"),
            "agroportal": AgroportalOntologiesConfigDTO.from_dict(obj["agroportal"]) if obj.get("agroportal") is not None else None
        })
        return _obj


