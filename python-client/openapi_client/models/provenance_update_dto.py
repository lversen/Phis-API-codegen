# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.activity_creation_dto import ActivityCreationDTO
from openapi_client.models.agent_model import AgentModel
from openapi_client.models.user_get_dto import UserGetDTO
from typing import Optional, Set
from typing_extensions import Self

class ProvenanceUpdateDTO(BaseModel):
    """
    ProvenanceUpdateDTO
    """ # noqa: E501
    uri: StrictStr = Field(description="uri of the provenance being updated")
    name: StrictStr = Field(description="provenance uri manually entered")
    description: Optional[StrictStr] = Field(default=None, description="provenance description")
    prov_activity: Optional[List[ActivityCreationDTO]] = None
    prov_agent: Optional[List[AgentModel]] = None
    publisher: Optional[UserGetDTO] = None
    issued: Optional[datetime] = None
    modified: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["uri", "name", "description", "prov_activity", "prov_agent", "publisher", "issued", "modified"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProvenanceUpdateDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in prov_activity (list)
        _items = []
        if self.prov_activity:
            for _item_prov_activity in self.prov_activity:
                if _item_prov_activity:
                    _items.append(_item_prov_activity.to_dict())
            _dict['prov_activity'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in prov_agent (list)
        _items = []
        if self.prov_agent:
            for _item_prov_agent in self.prov_agent:
                if _item_prov_agent:
                    _items.append(_item_prov_agent.to_dict())
            _dict['prov_agent'] = _items
        # override the default output from pydantic by calling `to_dict()` of publisher
        if self.publisher:
            _dict['publisher'] = self.publisher.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProvenanceUpdateDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uri": obj.get("uri"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "prov_activity": [ActivityCreationDTO.from_dict(_item) for _item in obj["prov_activity"]] if obj.get("prov_activity") is not None else None,
            "prov_agent": [AgentModel.from_dict(_item) for _item in obj["prov_agent"]] if obj.get("prov_agent") is not None else None,
            "publisher": UserGetDTO.from_dict(obj["publisher"]) if obj.get("publisher") is not None else None,
            "issued": obj.get("issued"),
            "modified": obj.get("modified")
        })
        return _obj


