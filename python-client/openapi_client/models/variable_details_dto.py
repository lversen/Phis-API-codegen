# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.characteristic_get_dto import CharacteristicGetDTO
from openapi_client.models.entity_get_dto import EntityGetDTO
from openapi_client.models.interest_entity_get_dto import InterestEntityGetDTO
from openapi_client.models.method_get_dto import MethodGetDTO
from openapi_client.models.shared_resource_instance_dto import SharedResourceInstanceDTO
from openapi_client.models.species_dto import SpeciesDTO
from openapi_client.models.unit_details_dto import UnitDetailsDTO
from openapi_client.models.user_get_dto import UserGetDTO
from typing import Optional, Set
from typing_extensions import Self

class VariableDetailsDTO(BaseModel):
    """
    VariableDetailsDTO
    """ # noqa: E501
    uri: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    alternative_name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    entity: Optional[EntityGetDTO] = None
    entity_of_interest: Optional[InterestEntityGetDTO] = None
    characteristic: Optional[CharacteristicGetDTO] = None
    trait: Optional[StrictStr] = None
    trait_name: Optional[StrictStr] = None
    method: Optional[MethodGetDTO] = None
    unit: Optional[UnitDetailsDTO] = None
    species: Optional[List[SpeciesDTO]] = None
    time_interval: Optional[StrictStr] = None
    sampling_interval: Optional[StrictStr] = None
    datatype: Optional[StrictStr] = None
    exact_match: Optional[List[StrictStr]] = None
    close_match: Optional[List[StrictStr]] = None
    broad_match: Optional[List[StrictStr]] = None
    narrow_match: Optional[List[StrictStr]] = None
    publisher: Optional[UserGetDTO] = None
    publication_date: Optional[datetime] = None
    last_updated_date: Optional[datetime] = None
    from_shared_resource_instance: Optional[SharedResourceInstanceDTO] = None
    __properties: ClassVar[List[str]] = ["uri", "name", "alternative_name", "description", "entity", "entity_of_interest", "characteristic", "trait", "trait_name", "method", "unit", "species", "time_interval", "sampling_interval", "datatype", "exact_match", "close_match", "broad_match", "narrow_match", "publisher", "publication_date", "last_updated_date", "from_shared_resource_instance"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VariableDetailsDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of entity
        if self.entity:
            _dict['entity'] = self.entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity_of_interest
        if self.entity_of_interest:
            _dict['entity_of_interest'] = self.entity_of_interest.to_dict()
        # override the default output from pydantic by calling `to_dict()` of characteristic
        if self.characteristic:
            _dict['characteristic'] = self.characteristic.to_dict()
        # override the default output from pydantic by calling `to_dict()` of method
        if self.method:
            _dict['method'] = self.method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unit
        if self.unit:
            _dict['unit'] = self.unit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in species (list)
        _items = []
        if self.species:
            for _item_species in self.species:
                if _item_species:
                    _items.append(_item_species.to_dict())
            _dict['species'] = _items
        # override the default output from pydantic by calling `to_dict()` of publisher
        if self.publisher:
            _dict['publisher'] = self.publisher.to_dict()
        # override the default output from pydantic by calling `to_dict()` of from_shared_resource_instance
        if self.from_shared_resource_instance:
            _dict['from_shared_resource_instance'] = self.from_shared_resource_instance.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VariableDetailsDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uri": obj.get("uri"),
            "name": obj.get("name"),
            "alternative_name": obj.get("alternative_name"),
            "description": obj.get("description"),
            "entity": EntityGetDTO.from_dict(obj["entity"]) if obj.get("entity") is not None else None,
            "entity_of_interest": InterestEntityGetDTO.from_dict(obj["entity_of_interest"]) if obj.get("entity_of_interest") is not None else None,
            "characteristic": CharacteristicGetDTO.from_dict(obj["characteristic"]) if obj.get("characteristic") is not None else None,
            "trait": obj.get("trait"),
            "trait_name": obj.get("trait_name"),
            "method": MethodGetDTO.from_dict(obj["method"]) if obj.get("method") is not None else None,
            "unit": UnitDetailsDTO.from_dict(obj["unit"]) if obj.get("unit") is not None else None,
            "species": [SpeciesDTO.from_dict(_item) for _item in obj["species"]] if obj.get("species") is not None else None,
            "time_interval": obj.get("time_interval"),
            "sampling_interval": obj.get("sampling_interval"),
            "datatype": obj.get("datatype"),
            "exact_match": obj.get("exact_match"),
            "close_match": obj.get("close_match"),
            "broad_match": obj.get("broad_match"),
            "narrow_match": obj.get("narrow_match"),
            "publisher": UserGetDTO.from_dict(obj["publisher"]) if obj.get("publisher") is not None else None,
            "publication_date": obj.get("publication_date"),
            "last_updated_date": obj.get("last_updated_date"),
            "from_shared_resource_instance": SharedResourceInstanceDTO.from_dict(obj["from_shared_resource_instance"]) if obj.get("from_shared_resource_instance") is not None else None
        })
        return _obj


