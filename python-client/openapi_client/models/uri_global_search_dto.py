# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_file_get_dto import DataFileGetDTO
from openapi_client.models.data_get_search_dto import DataGetSearchDTO
from openapi_client.models.uri_types_dto import URITypesDTO
from openapi_client.models.user_get_dto import UserGetDTO
from typing import Optional, Set
from typing_extensions import Self

class URIGlobalSearchDTO(BaseModel):
    """
    URIGlobalSearchDTO
    """ # noqa: E501
    uri: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    context: Optional[StrictStr] = None
    var_property: Optional[StrictBool] = Field(default=None, alias="property")
    rdf_type: Optional[StrictStr] = None
    rdf_type_name: Optional[StrictStr] = None
    rdfs_comment: Optional[StrictStr] = None
    publisher: Optional[UserGetDTO] = None
    publication_date: Optional[StrictStr] = None
    last_updated_date: Optional[StrictStr] = None
    super_types: Optional[URITypesDTO] = None
    data_dto: Optional[DataGetSearchDTO] = None
    datafile_dto: Optional[DataFileGetDTO] = None
    root_class: Optional[StrictStr] = None
    is_property: Optional[StrictBool] = None
    factor_uri: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["uri", "name", "context", "property", "rdf_type", "rdf_type_name", "rdfs_comment", "publisher", "publication_date", "last_updated_date", "super_types", "data_dto", "datafile_dto", "root_class", "is_property", "factor_uri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of URIGlobalSearchDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of publisher
        if self.publisher:
            _dict['publisher'] = self.publisher.to_dict()
        # override the default output from pydantic by calling `to_dict()` of super_types
        if self.super_types:
            _dict['super_types'] = self.super_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_dto
        if self.data_dto:
            _dict['data_dto'] = self.data_dto.to_dict()
        # override the default output from pydantic by calling `to_dict()` of datafile_dto
        if self.datafile_dto:
            _dict['datafile_dto'] = self.datafile_dto.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of URIGlobalSearchDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uri": obj.get("uri"),
            "name": obj.get("name"),
            "context": obj.get("context"),
            "property": obj.get("property"),
            "rdf_type": obj.get("rdf_type"),
            "rdf_type_name": obj.get("rdf_type_name"),
            "rdfs_comment": obj.get("rdfs_comment"),
            "publisher": UserGetDTO.from_dict(obj["publisher"]) if obj.get("publisher") is not None else None,
            "publication_date": obj.get("publication_date"),
            "last_updated_date": obj.get("last_updated_date"),
            "super_types": URITypesDTO.from_dict(obj["super_types"]) if obj.get("super_types") is not None else None,
            "data_dto": DataGetSearchDTO.from_dict(obj["data_dto"]) if obj.get("data_dto") is not None else None,
            "datafile_dto": DataFileGetDTO.from_dict(obj["datafile_dto"]) if obj.get("datafile_dto") is not None else None,
            "root_class": obj.get("root_class"),
            "is_property": obj.get("is_property"),
            "factor_uri": obj.get("factor_uri")
        })
        return _obj


