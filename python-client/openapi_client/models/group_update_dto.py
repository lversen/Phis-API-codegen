# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.group_user_profile_dto import GroupUserProfileDTO
from typing import Optional, Set
from typing_extensions import Self

class GroupUpdateDTO(BaseModel):
    """
    GroupUpdateDTO
    """ # noqa: E501
    uri: StrictStr = Field(description="Group URI")
    rdf_type: Optional[StrictStr] = None
    rdf_type_name: Optional[StrictStr] = None
    name: StrictStr = Field(description="Group name")
    description: StrictStr = Field(description="Group description")
    user_profiles: Optional[List[GroupUserProfileDTO]] = Field(default=None, description="Group user with profile")
    publication_date: Optional[datetime] = None
    last_updated_date: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["uri", "rdf_type", "rdf_type_name", "name", "description", "user_profiles", "publication_date", "last_updated_date"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GroupUpdateDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in user_profiles (list)
        _items = []
        if self.user_profiles:
            for _item_user_profiles in self.user_profiles:
                if _item_user_profiles:
                    _items.append(_item_user_profiles.to_dict())
            _dict['user_profiles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GroupUpdateDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uri": obj.get("uri"),
            "rdf_type": obj.get("rdf_type"),
            "rdf_type_name": obj.get("rdf_type_name"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "user_profiles": [GroupUserProfileDTO.from_dict(_item) for _item in obj["user_profiles"]] if obj.get("user_profiles") is not None else None,
            "publication_date": obj.get("publication_date"),
            "last_updated_date": obj.get("last_updated_date")
        })
        return _obj


