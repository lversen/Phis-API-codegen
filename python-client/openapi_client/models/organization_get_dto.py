# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.named_resource_dto_experiment_model import NamedResourceDTOExperimentModel
from openapi_client.models.named_resource_dto_facility_model import NamedResourceDTOFacilityModel
from openapi_client.models.named_resource_dto_group_model import NamedResourceDTOGroupModel
from openapi_client.models.named_resource_dto_organization_model import NamedResourceDTOOrganizationModel
from openapi_client.models.named_resource_dto_site_model import NamedResourceDTOSiteModel
from openapi_client.models.user_get_dto import UserGetDTO
from typing import Optional, Set
from typing_extensions import Self

class OrganizationGetDTO(BaseModel):
    """
    OrganizationGetDTO
    """ # noqa: E501
    uri: Optional[StrictStr] = None
    rdf_type: Optional[StrictStr] = None
    rdf_type_name: Optional[StrictStr] = None
    publisher: Optional[UserGetDTO] = None
    publication_date: Optional[datetime] = None
    last_updated_date: Optional[datetime] = None
    name: Optional[StrictStr] = None
    parents: Optional[List[NamedResourceDTOOrganizationModel]] = None
    children: Optional[List[NamedResourceDTOOrganizationModel]] = None
    groups: Optional[List[NamedResourceDTOGroupModel]] = None
    facilities: Optional[List[NamedResourceDTOFacilityModel]] = None
    sites: Optional[List[NamedResourceDTOSiteModel]] = None
    experiments: Optional[List[NamedResourceDTOExperimentModel]] = None
    __properties: ClassVar[List[str]] = ["uri", "rdf_type", "rdf_type_name", "publisher", "publication_date", "last_updated_date", "name", "parents", "children", "groups", "facilities", "sites", "experiments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrganizationGetDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of publisher
        if self.publisher:
            _dict['publisher'] = self.publisher.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in parents (list)
        _items = []
        if self.parents:
            for _item_parents in self.parents:
                if _item_parents:
                    _items.append(_item_parents.to_dict())
            _dict['parents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item_children in self.children:
                if _item_children:
                    _items.append(_item_children.to_dict())
            _dict['children'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in groups (list)
        _items = []
        if self.groups:
            for _item_groups in self.groups:
                if _item_groups:
                    _items.append(_item_groups.to_dict())
            _dict['groups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in facilities (list)
        _items = []
        if self.facilities:
            for _item_facilities in self.facilities:
                if _item_facilities:
                    _items.append(_item_facilities.to_dict())
            _dict['facilities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sites (list)
        _items = []
        if self.sites:
            for _item_sites in self.sites:
                if _item_sites:
                    _items.append(_item_sites.to_dict())
            _dict['sites'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in experiments (list)
        _items = []
        if self.experiments:
            for _item_experiments in self.experiments:
                if _item_experiments:
                    _items.append(_item_experiments.to_dict())
            _dict['experiments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrganizationGetDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uri": obj.get("uri"),
            "rdf_type": obj.get("rdf_type"),
            "rdf_type_name": obj.get("rdf_type_name"),
            "publisher": UserGetDTO.from_dict(obj["publisher"]) if obj.get("publisher") is not None else None,
            "publication_date": obj.get("publication_date"),
            "last_updated_date": obj.get("last_updated_date"),
            "name": obj.get("name"),
            "parents": [NamedResourceDTOOrganizationModel.from_dict(_item) for _item in obj["parents"]] if obj.get("parents") is not None else None,
            "children": [NamedResourceDTOOrganizationModel.from_dict(_item) for _item in obj["children"]] if obj.get("children") is not None else None,
            "groups": [NamedResourceDTOGroupModel.from_dict(_item) for _item in obj["groups"]] if obj.get("groups") is not None else None,
            "facilities": [NamedResourceDTOFacilityModel.from_dict(_item) for _item in obj["facilities"]] if obj.get("facilities") is not None else None,
            "sites": [NamedResourceDTOSiteModel.from_dict(_item) for _item in obj["sites"]] if obj.get("sites") is not None else None,
            "experiments": [NamedResourceDTOExperimentModel.from_dict(_item) for _item in obj["experiments"]] if obj.get("experiments") is not None else None
        })
        return _obj


