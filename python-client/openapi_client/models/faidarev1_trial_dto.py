# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.faidarev1_contact_dto import Faidarev1ContactDTO
from openapi_client.models.faidarev1_dataset_authorship_dto import Faidarev1DatasetAuthorshipDTO
from openapi_client.models.faidarev1_study_summary_dto import Faidarev1StudySummaryDTO
from openapi_client.models.faidarev1_trial_additional_info_dto import Faidarev1TrialAdditionalInfoDTO
from typing import Optional, Set
from typing_extensions import Self

class Faidarev1TrialDTO(BaseModel):
    """
    Faidarev1TrialDTO
    """ # noqa: E501
    active: Optional[StrictBool] = None
    additional_info: Optional[Faidarev1TrialAdditionalInfoDTO] = Field(default=None, alias="additionalInfo")
    documentation_url: Optional[StrictStr] = Field(default=None, alias="documentationURL")
    end_date: Optional[StrictStr] = Field(default=None, alias="endDate")
    start_date: Optional[StrictStr] = Field(default=None, alias="startDate")
    trial_name: Optional[StrictStr] = Field(default=None, alias="trialName")
    trial_db_id: Optional[StrictStr] = Field(default=None, alias="trialDbId")
    trial_type: Optional[StrictStr] = Field(default=None, alias="trialType")
    dataset_authorship: Optional[Faidarev1DatasetAuthorshipDTO] = Field(default=None, alias="datasetAuthorship")
    studies: Optional[List[Faidarev1StudySummaryDTO]] = None
    contacts: Optional[List[Faidarev1ContactDTO]] = None
    program_db_id: Optional[StrictStr] = Field(default=None, alias="programDbId")
    program_name: Optional[StrictStr] = Field(default=None, alias="programName")
    __properties: ClassVar[List[str]] = ["active", "additionalInfo", "documentationURL", "endDate", "startDate", "trialName", "trialDbId", "trialType", "datasetAuthorship", "studies", "contacts", "programDbId", "programName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Faidarev1TrialDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of additional_info
        if self.additional_info:
            _dict['additionalInfo'] = self.additional_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dataset_authorship
        if self.dataset_authorship:
            _dict['datasetAuthorship'] = self.dataset_authorship.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in studies (list)
        _items = []
        if self.studies:
            for _item_studies in self.studies:
                if _item_studies:
                    _items.append(_item_studies.to_dict())
            _dict['studies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in contacts (list)
        _items = []
        if self.contacts:
            for _item_contacts in self.contacts:
                if _item_contacts:
                    _items.append(_item_contacts.to_dict())
            _dict['contacts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Faidarev1TrialDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "additionalInfo": Faidarev1TrialAdditionalInfoDTO.from_dict(obj["additionalInfo"]) if obj.get("additionalInfo") is not None else None,
            "documentationURL": obj.get("documentationURL"),
            "endDate": obj.get("endDate"),
            "startDate": obj.get("startDate"),
            "trialName": obj.get("trialName"),
            "trialDbId": obj.get("trialDbId"),
            "trialType": obj.get("trialType"),
            "datasetAuthorship": Faidarev1DatasetAuthorshipDTO.from_dict(obj["datasetAuthorship"]) if obj.get("datasetAuthorship") is not None else None,
            "studies": [Faidarev1StudySummaryDTO.from_dict(_item) for _item in obj["studies"]] if obj.get("studies") is not None else None,
            "contacts": [Faidarev1ContactDTO.from_dict(_item) for _item in obj["contacts"]] if obj.get("contacts") is not None else None,
            "programDbId": obj.get("programDbId"),
            "programName": obj.get("programName")
        })
        return _obj


