# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.germplasm_get_all_dto import GermplasmGetAllDTO
from openapi_client.models.user_get_dto import UserGetDTO
from typing import Optional, Set
from typing_extensions import Self

class GermplasmGetSingleDTO(BaseModel):
    """
    GermplasmGetSingleDTO
    """ # noqa: E501
    uri: Optional[StrictStr] = None
    publisher: Optional[UserGetDTO] = None
    publication_date: Optional[datetime] = None
    last_updated_date: Optional[datetime] = None
    rdf_type: Optional[StrictStr] = None
    rdf_type_name: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    synonyms: Optional[List[StrictStr]] = None
    code: Optional[StrictStr] = None
    production_year: Optional[StrictInt] = None
    description: Optional[StrictStr] = None
    species: Optional[StrictStr] = None
    species_name: Optional[StrictStr] = None
    variety: Optional[StrictStr] = None
    variety_name: Optional[StrictStr] = None
    accession: Optional[StrictStr] = None
    accession_name: Optional[StrictStr] = None
    institute: Optional[StrictStr] = None
    website: Optional[StrictStr] = None
    has_parent_germplasm: Optional[List[GermplasmGetAllDTO]] = None
    has_parent_germplasm_m: Optional[List[GermplasmGetAllDTO]] = None
    has_parent_germplasm_f: Optional[List[GermplasmGetAllDTO]] = None
    metadata: Optional[Dict[str, StrictStr]] = None
    __properties: ClassVar[List[str]] = ["uri", "publisher", "publication_date", "last_updated_date", "rdf_type", "rdf_type_name", "name", "synonyms", "code", "production_year", "description", "species", "species_name", "variety", "variety_name", "accession", "accession_name", "institute", "website", "has_parent_germplasm", "has_parent_germplasm_m", "has_parent_germplasm_f", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GermplasmGetSingleDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of publisher
        if self.publisher:
            _dict['publisher'] = self.publisher.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in has_parent_germplasm (list)
        _items = []
        if self.has_parent_germplasm:
            for _item_has_parent_germplasm in self.has_parent_germplasm:
                if _item_has_parent_germplasm:
                    _items.append(_item_has_parent_germplasm.to_dict())
            _dict['has_parent_germplasm'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in has_parent_germplasm_m (list)
        _items = []
        if self.has_parent_germplasm_m:
            for _item_has_parent_germplasm_m in self.has_parent_germplasm_m:
                if _item_has_parent_germplasm_m:
                    _items.append(_item_has_parent_germplasm_m.to_dict())
            _dict['has_parent_germplasm_m'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in has_parent_germplasm_f (list)
        _items = []
        if self.has_parent_germplasm_f:
            for _item_has_parent_germplasm_f in self.has_parent_germplasm_f:
                if _item_has_parent_germplasm_f:
                    _items.append(_item_has_parent_germplasm_f.to_dict())
            _dict['has_parent_germplasm_f'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GermplasmGetSingleDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uri": obj.get("uri"),
            "publisher": UserGetDTO.from_dict(obj["publisher"]) if obj.get("publisher") is not None else None,
            "publication_date": obj.get("publication_date"),
            "last_updated_date": obj.get("last_updated_date"),
            "rdf_type": obj.get("rdf_type"),
            "rdf_type_name": obj.get("rdf_type_name"),
            "name": obj.get("name"),
            "synonyms": obj.get("synonyms"),
            "code": obj.get("code"),
            "production_year": obj.get("production_year"),
            "description": obj.get("description"),
            "species": obj.get("species"),
            "species_name": obj.get("species_name"),
            "variety": obj.get("variety"),
            "variety_name": obj.get("variety_name"),
            "accession": obj.get("accession"),
            "accession_name": obj.get("accession_name"),
            "institute": obj.get("institute"),
            "website": obj.get("website"),
            "has_parent_germplasm": [GermplasmGetAllDTO.from_dict(_item) for _item in obj["has_parent_germplasm"]] if obj.get("has_parent_germplasm") is not None else None,
            "has_parent_germplasm_m": [GermplasmGetAllDTO.from_dict(_item) for _item in obj["has_parent_germplasm_m"]] if obj.get("has_parent_germplasm_m") is not None else None,
            "has_parent_germplasm_f": [GermplasmGetAllDTO.from_dict(_item) for _item in obj["has_parent_germplasm_f"]] if obj.get("has_parent_germplasm_f") is not None else None,
            "metadata": obj.get("metadata")
        })
        return _obj


