# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.model import Model
from openapi_client.models.rdf_datatype import RDFDatatype
from typing import Optional, Set
from typing_extensions import Self

class Literal(BaseModel):
    """
    Literal
    """ # noqa: E501
    boolean: Optional[StrictBool] = None
    byte: Optional[Union[Annotated[bytes, Field(strict=True)], Annotated[str, Field(strict=True)]]] = None
    short: Optional[StrictInt] = None
    char: Optional[StrictStr] = None
    int: Optional[StrictInt] = None
    long: Optional[StrictInt] = None
    var_float: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="float")
    double: Optional[Union[StrictFloat, StrictInt]] = None
    value: Optional[Dict[str, Any]] = None
    language: Optional[StrictStr] = None
    string: Optional[StrictStr] = None
    well_formed_xml: Optional[StrictBool] = Field(default=None, alias="wellFormedXML")
    datatype: Optional[RDFDatatype] = None
    datatype_uri: Optional[StrictStr] = Field(default=None, alias="datatypeURI")
    lexical_form: Optional[StrictStr] = Field(default=None, alias="lexicalForm")
    resource: Optional[StrictBool] = None
    model: Optional[Model] = None
    literal: Optional[StrictBool] = None
    anon: Optional[StrictBool] = None
    uriresource: Optional[StrictBool] = None
    stmt_resource: Optional[StrictBool] = Field(default=None, alias="stmtResource")
    __properties: ClassVar[List[str]] = ["boolean", "byte", "short", "char", "int", "long", "float", "double", "value", "language", "string", "wellFormedXML", "datatype", "datatypeURI", "lexicalForm", "resource", "model", "literal", "anon", "uriresource", "stmtResource"]

    @field_validator('byte')
    def byte_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$", value):
            raise ValueError(r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Literal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of datatype
        if self.datatype:
            _dict['datatype'] = self.datatype.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict['model'] = self.model.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Literal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boolean": obj.get("boolean"),
            "byte": obj.get("byte"),
            "short": obj.get("short"),
            "char": obj.get("char"),
            "int": obj.get("int"),
            "long": obj.get("long"),
            "float": obj.get("float"),
            "double": obj.get("double"),
            "value": obj.get("value"),
            "language": obj.get("language"),
            "string": obj.get("string"),
            "wellFormedXML": obj.get("wellFormedXML"),
            "datatype": RDFDatatype.from_dict(obj["datatype"]) if obj.get("datatype") is not None else None,
            "datatypeURI": obj.get("datatypeURI"),
            "lexicalForm": obj.get("lexicalForm"),
            "resource": obj.get("resource"),
            "model": Model.from_dict(obj["model"]) if obj.get("model") is not None else None,
            "literal": obj.get("literal"),
            "anon": obj.get("anon"),
            "uriresource": obj.get("uriresource"),
            "stmtResource": obj.get("stmtResource")
        })
        return _obj


