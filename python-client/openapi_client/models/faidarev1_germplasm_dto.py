# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Faidarev1GermplasmDTO(BaseModel):
    """
    Faidarev1GermplasmDTO
    """ # noqa: E501
    accession_number: Optional[StrictStr] = Field(default=None, alias="accessionNumber")
    acquisition_date: Optional[StrictStr] = Field(default=None, alias="acquisitionDate")
    biological_status_of_accession_code: Optional[StrictInt] = Field(default=None, alias="biologicalStatusOfAccessionCode")
    common_crop_name: Optional[StrictStr] = Field(default=None, alias="commonCropName")
    country_of_origin_code: Optional[StrictStr] = Field(default=None, alias="countryOfOriginCode")
    default_display_name: Optional[StrictStr] = Field(default=None, alias="defaultDisplayName")
    documentation_url: Optional[StrictStr] = Field(default=None, alias="documentationURL")
    donors: Optional[List[Dict[str, Any]]] = None
    genus: Optional[StrictStr] = None
    germplasm_db_id: Optional[StrictStr] = Field(default=None, alias="germplasmDbId")
    germplasm_name: Optional[StrictStr] = Field(default=None, alias="germplasmName")
    germplasm_pui: Optional[StrictStr] = Field(default=None, alias="germplasmPUI")
    institute_code: Optional[StrictStr] = Field(default=None, alias="instituteCode")
    institute_name: Optional[StrictStr] = Field(default=None, alias="instituteName")
    pedigree: Optional[StrictStr] = None
    seed_source: Optional[StrictStr] = Field(default=None, alias="seedSource")
    species: Optional[StrictStr] = None
    species_authority: Optional[StrictStr] = Field(default=None, alias="speciesAuthority")
    subtaxa: Optional[StrictStr] = None
    subtaxa_authority: Optional[StrictStr] = Field(default=None, alias="subtaxaAuthority")
    synonyms: Optional[List[StrictStr]] = None
    taxon_ids: Optional[List[Dict[str, Any]]] = Field(default=None, alias="taxonIds")
    type_of_germplasm_storage_code: Optional[List[StrictStr]] = Field(default=None, alias="typeOfGermplasmStorageCode")
    study_db_ib: Optional[List[StrictStr]] = Field(default=None, alias="studyDbIb")
    __properties: ClassVar[List[str]] = ["accessionNumber", "acquisitionDate", "biologicalStatusOfAccessionCode", "commonCropName", "countryOfOriginCode", "defaultDisplayName", "documentationURL", "donors", "genus", "germplasmDbId", "germplasmName", "germplasmPUI", "instituteCode", "instituteName", "pedigree", "seedSource", "species", "speciesAuthority", "subtaxa", "subtaxaAuthority", "synonyms", "taxonIds", "typeOfGermplasmStorageCode", "studyDbIb"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Faidarev1GermplasmDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Faidarev1GermplasmDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessionNumber": obj.get("accessionNumber"),
            "acquisitionDate": obj.get("acquisitionDate"),
            "biologicalStatusOfAccessionCode": obj.get("biologicalStatusOfAccessionCode"),
            "commonCropName": obj.get("commonCropName"),
            "countryOfOriginCode": obj.get("countryOfOriginCode"),
            "defaultDisplayName": obj.get("defaultDisplayName"),
            "documentationURL": obj.get("documentationURL"),
            "donors": obj.get("donors"),
            "genus": obj.get("genus"),
            "germplasmDbId": obj.get("germplasmDbId"),
            "germplasmName": obj.get("germplasmName"),
            "germplasmPUI": obj.get("germplasmPUI"),
            "instituteCode": obj.get("instituteCode"),
            "instituteName": obj.get("instituteName"),
            "pedigree": obj.get("pedigree"),
            "seedSource": obj.get("seedSource"),
            "species": obj.get("species"),
            "speciesAuthority": obj.get("speciesAuthority"),
            "subtaxa": obj.get("subtaxa"),
            "subtaxaAuthority": obj.get("subtaxaAuthority"),
            "synonyms": obj.get("synonyms"),
            "taxonIds": obj.get("taxonIds"),
            "typeOfGermplasmStorageCode": obj.get("typeOfGermplasmStorageCode"),
            "studyDbIb": obj.get("studyDbIb")
        })
        return _obj


