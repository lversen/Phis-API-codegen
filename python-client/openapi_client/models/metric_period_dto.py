# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.count_list_item_period_dto import CountListItemPeriodDTO
from typing import Optional, Set
from typing_extensions import Self

class MetricPeriodDTO(BaseModel):
    """
    MetricPeriodDTO
    """ # noqa: E501
    start_date: Optional[StrictInt] = None
    end_date: Optional[StrictInt] = None
    scientific_object_list: Optional[CountListItemPeriodDTO] = None
    experiment_list: Optional[CountListItemPeriodDTO] = None
    data_list: Optional[CountListItemPeriodDTO] = None
    device_list: Optional[CountListItemPeriodDTO] = None
    germplasm_list: Optional[CountListItemPeriodDTO] = None
    __properties: ClassVar[List[str]] = ["start_date", "end_date", "scientific_object_list", "experiment_list", "data_list", "device_list", "germplasm_list"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetricPeriodDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of scientific_object_list
        if self.scientific_object_list:
            _dict['scientific_object_list'] = self.scientific_object_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of experiment_list
        if self.experiment_list:
            _dict['experiment_list'] = self.experiment_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_list
        if self.data_list:
            _dict['data_list'] = self.data_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of device_list
        if self.device_list:
            _dict['device_list'] = self.device_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of germplasm_list
        if self.germplasm_list:
            _dict['germplasm_list'] = self.germplasm_list.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetricPeriodDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "start_date": obj.get("start_date"),
            "end_date": obj.get("end_date"),
            "scientific_object_list": CountListItemPeriodDTO.from_dict(obj["scientific_object_list"]) if obj.get("scientific_object_list") is not None else None,
            "experiment_list": CountListItemPeriodDTO.from_dict(obj["experiment_list"]) if obj.get("experiment_list") is not None else None,
            "data_list": CountListItemPeriodDTO.from_dict(obj["data_list"]) if obj.get("data_list") is not None else None,
            "device_list": CountListItemPeriodDTO.from_dict(obj["device_list"]) if obj.get("device_list") is not None else None,
            "germplasm_list": CountListItemPeriodDTO.from_dict(obj["germplasm_list"]) if obj.get("germplasm_list") is not None else None
        })
        return _obj


