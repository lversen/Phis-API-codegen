# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class DataSearchDTO(BaseModel):
    """
    DataSearchDTO
    """ # noqa: E501
    start_date: Optional[StrictStr] = Field(default=None, description="start date")
    end_date: Optional[StrictStr] = Field(default=None, description="end date")
    timezone: Optional[StrictStr] = Field(default=None, description="to specify if the offset is not in the date and if the timezone is different from the default one")
    experiments: Optional[List[StrictStr]] = None
    targets: Optional[List[StrictStr]] = None
    variables: Optional[List[StrictStr]] = None
    devices: Optional[List[StrictStr]] = None
    provenances: Optional[List[StrictStr]] = None
    min_confidence: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(default=None, description="confidence index")
    max_confidence: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(default=None, description="confidence index")
    metadata: Optional[StrictStr] = Field(default=None, description="key-value system to store additional information that can be used to query data")
    mode: Optional[StrictStr] = Field(default=None, description="format wide or long")
    with_raw_data: Optional[StrictBool] = Field(default=None, description="export also raw_data")
    __properties: ClassVar[List[str]] = ["start_date", "end_date", "timezone", "experiments", "targets", "variables", "devices", "provenances", "min_confidence", "max_confidence", "metadata", "mode", "with_raw_data"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataSearchDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataSearchDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "start_date": obj.get("start_date"),
            "end_date": obj.get("end_date"),
            "timezone": obj.get("timezone"),
            "experiments": obj.get("experiments"),
            "targets": obj.get("targets"),
            "variables": obj.get("variables"),
            "devices": obj.get("devices"),
            "provenances": obj.get("provenances"),
            "min_confidence": obj.get("min_confidence"),
            "max_confidence": obj.get("max_confidence"),
            "metadata": obj.get("metadata"),
            "mode": obj.get("mode"),
            "with_raw_data": obj.get("with_raw_data")
        })
        return _obj


