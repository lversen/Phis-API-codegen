# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.br_apiv1_observation_summary_dto import BrAPIv1ObservationSummaryDTO
from openapi_client.models.br_apiv1_observation_unit_treatment_dto import BrAPIv1ObservationUnitTreatmentDTO
from openapi_client.models.br_apiv1_observation_unit_xref_dto import BrAPIv1ObservationUnitXrefDTO
from typing import Optional, Set
from typing_extensions import Self

class BrAPIv1ObservationUnitDTO(BaseModel):
    """
    BrAPIv1ObservationUnitDTO
    """ # noqa: E501
    block_number: Optional[StrictStr] = Field(default=None, alias="blockNumber")
    entry_number: Optional[StrictStr] = Field(default=None, alias="entryNumber")
    entry_type: Optional[StrictStr] = Field(default=None, alias="entryType")
    germplasm_db_id: Optional[StrictStr] = Field(default=None, alias="germplasmDbId")
    germplasm_name: Optional[StrictStr] = Field(default=None, alias="germplasmName")
    location_db_id: Optional[StrictStr] = Field(default=None, alias="locationDbId")
    location_name: Optional[StrictStr] = Field(default=None, alias="locationName")
    observation_level: Optional[StrictStr] = Field(default=None, alias="observationLevel")
    observation_unit_db_id: Optional[StrictStr] = Field(default=None, alias="observationUnitDbId")
    observation_unit_xref: Optional[List[BrAPIv1ObservationUnitXrefDTO]] = Field(default=None, alias="observationUnitXref")
    observations: Optional[List[BrAPIv1ObservationSummaryDTO]] = None
    pedigree: Optional[StrictStr] = None
    plant_number: Optional[StrictStr] = Field(default=None, alias="plantNumber")
    plot_number: Optional[StrictStr] = Field(default=None, alias="plotNumber")
    position_coordinate_x: Optional[StrictStr] = Field(default=None, alias="positionCoordinateX")
    position_coordinate_x_type: Optional[StrictStr] = Field(default=None, alias="positionCoordinateXType")
    position_coordinate_y: Optional[StrictStr] = Field(default=None, alias="positionCoordinateY")
    position_coordinate_y_type: Optional[StrictStr] = Field(default=None, alias="positionCoordinateYType")
    program_db_id: Optional[StrictStr] = Field(default=None, alias="programDbId")
    program_name: Optional[StrictStr] = Field(default=None, alias="programName")
    replicate: Optional[StrictStr] = None
    study_db_id: Optional[StrictStr] = Field(default=None, alias="studyDbId")
    study_name: Optional[StrictStr] = Field(default=None, alias="studyName")
    treatments: Optional[List[BrAPIv1ObservationUnitTreatmentDTO]] = None
    trial_db_id: Optional[StrictStr] = Field(default=None, alias="trialDbId")
    trial_name: Optional[StrictStr] = Field(default=None, alias="trialName")
    __properties: ClassVar[List[str]] = ["blockNumber", "entryNumber", "entryType", "germplasmDbId", "germplasmName", "locationDbId", "locationName", "observationLevel", "observationUnitDbId", "observationUnitXref", "observations", "pedigree", "plantNumber", "plotNumber", "positionCoordinateX", "positionCoordinateXType", "positionCoordinateY", "positionCoordinateYType", "programDbId", "programName", "replicate", "studyDbId", "studyName", "treatments", "trialDbId", "trialName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BrAPIv1ObservationUnitDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in observation_unit_xref (list)
        _items = []
        if self.observation_unit_xref:
            for _item_observation_unit_xref in self.observation_unit_xref:
                if _item_observation_unit_xref:
                    _items.append(_item_observation_unit_xref.to_dict())
            _dict['observationUnitXref'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in observations (list)
        _items = []
        if self.observations:
            for _item_observations in self.observations:
                if _item_observations:
                    _items.append(_item_observations.to_dict())
            _dict['observations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in treatments (list)
        _items = []
        if self.treatments:
            for _item_treatments in self.treatments:
                if _item_treatments:
                    _items.append(_item_treatments.to_dict())
            _dict['treatments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BrAPIv1ObservationUnitDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blockNumber": obj.get("blockNumber"),
            "entryNumber": obj.get("entryNumber"),
            "entryType": obj.get("entryType"),
            "germplasmDbId": obj.get("germplasmDbId"),
            "germplasmName": obj.get("germplasmName"),
            "locationDbId": obj.get("locationDbId"),
            "locationName": obj.get("locationName"),
            "observationLevel": obj.get("observationLevel"),
            "observationUnitDbId": obj.get("observationUnitDbId"),
            "observationUnitXref": [BrAPIv1ObservationUnitXrefDTO.from_dict(_item) for _item in obj["observationUnitXref"]] if obj.get("observationUnitXref") is not None else None,
            "observations": [BrAPIv1ObservationSummaryDTO.from_dict(_item) for _item in obj["observations"]] if obj.get("observations") is not None else None,
            "pedigree": obj.get("pedigree"),
            "plantNumber": obj.get("plantNumber"),
            "plotNumber": obj.get("plotNumber"),
            "positionCoordinateX": obj.get("positionCoordinateX"),
            "positionCoordinateXType": obj.get("positionCoordinateXType"),
            "positionCoordinateY": obj.get("positionCoordinateY"),
            "positionCoordinateYType": obj.get("positionCoordinateYType"),
            "programDbId": obj.get("programDbId"),
            "programName": obj.get("programName"),
            "replicate": obj.get("replicate"),
            "studyDbId": obj.get("studyDbId"),
            "studyName": obj.get("studyName"),
            "treatments": [BrAPIv1ObservationUnitTreatmentDTO.from_dict(_item) for _item in obj["treatments"]] if obj.get("treatments") is not None else None,
            "trialDbId": obj.get("trialDbId"),
            "trialName": obj.get("trialName")
        })
        return _obj


