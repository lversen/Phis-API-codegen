# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user_get_dto import UserGetDTO
from typing import Optional, Set
from typing_extensions import Self

class RDFPropertyGetDTO(BaseModel):
    """
    RDFPropertyGetDTO
    """ # noqa: E501
    uri: StrictStr = Field(description="URI of property")
    domain: StrictStr = Field(description="Domain of the property : the rdf:type of any concept concerned by this property.")
    range: StrictStr = Field(description="Range of the property : the rdf:type of any value(can be a literal type or a concept type) concerned by this property.")
    parent: Optional[StrictStr] = Field(default=None, description="Parent of the property.")
    name: Optional[StrictStr] = Field(default=None, description="Default property name according language")
    comment: Optional[StrictStr] = Field(default=None, description="Default property description according language")
    rdf_type: StrictStr = Field(description="The type of property")
    name_translations: Dict[str, StrictStr] = Field(description="Name by languages, at least one name/language is required. Use '' as language if no language is specified")
    comment_translations: Dict[str, StrictStr] = Field(description="Description by languages, at least one description/language is required. Use '' as language if no language is specified")
    publisher: Optional[UserGetDTO] = None
    publication_date: Optional[datetime] = None
    last_updated_date: Optional[datetime] = None
    domain_label: Optional[StrictStr] = None
    range_label: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["uri", "domain", "range", "parent", "name", "comment", "rdf_type", "name_translations", "comment_translations", "publisher", "publication_date", "last_updated_date", "domain_label", "range_label"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RDFPropertyGetDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of publisher
        if self.publisher:
            _dict['publisher'] = self.publisher.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RDFPropertyGetDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uri": obj.get("uri"),
            "domain": obj.get("domain"),
            "range": obj.get("range"),
            "parent": obj.get("parent"),
            "name": obj.get("name"),
            "comment": obj.get("comment"),
            "rdf_type": obj.get("rdf_type"),
            "name_translations": obj.get("name_translations"),
            "comment_translations": obj.get("comment_translations"),
            "publisher": UserGetDTO.from_dict(obj["publisher"]) if obj.get("publisher") is not None else None,
            "publication_date": obj.get("publication_date"),
            "last_updated_date": obj.get("last_updated_date"),
            "domain_label": obj.get("domain_label"),
            "range_label": obj.get("range_label")
        })
        return _obj


