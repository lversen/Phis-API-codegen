# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.literal import Literal
from openapi_client.models.model import Model
from openapi_client.models.rdf_node import RDFNode
from typing import Optional, Set
from typing_extensions import Self

class Statement(BaseModel):
    """
    Statement
    """ # noqa: E501
    boolean: Optional[StrictBool] = None
    byte: Optional[Union[Annotated[bytes, Field(strict=True)], Annotated[str, Field(strict=True)]]] = None
    short: Optional[StrictInt] = None
    char: Optional[StrictStr] = None
    int: Optional[StrictInt] = None
    long: Optional[StrictInt] = None
    var_float: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="float")
    double: Optional[Union[StrictFloat, StrictInt]] = None
    resource: Optional[Resource] = None
    object: Optional[RDFNode] = None
    language: Optional[StrictStr] = None
    string: Optional[StrictStr] = None
    list: Optional[RDFList] = None
    model: Optional[Model] = None
    subject: Optional[Resource] = None
    literal: Optional[Literal] = None
    bag: Optional[Bag] = None
    alt: Optional[Alt] = None
    seq: Optional[Seq] = None
    predicate: Optional[ModelProperty] = None
    reified: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["boolean", "byte", "short", "char", "int", "long", "float", "double", "resource", "object", "language", "string", "list", "model", "subject", "literal", "bag", "alt", "seq", "predicate", "reified"]

    @field_validator('byte')
    def byte_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$", value):
            raise ValueError(r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Statement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of resource
        if self.resource:
            _dict['resource'] = self.resource.to_dict()
        # override the default output from pydantic by calling `to_dict()` of object
        if self.object:
            _dict['object'] = self.object.to_dict()
        # override the default output from pydantic by calling `to_dict()` of list
        if self.list:
            _dict['list'] = self.list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict['model'] = self.model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subject
        if self.subject:
            _dict['subject'] = self.subject.to_dict()
        # override the default output from pydantic by calling `to_dict()` of literal
        if self.literal:
            _dict['literal'] = self.literal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bag
        if self.bag:
            _dict['bag'] = self.bag.to_dict()
        # override the default output from pydantic by calling `to_dict()` of alt
        if self.alt:
            _dict['alt'] = self.alt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of seq
        if self.seq:
            _dict['seq'] = self.seq.to_dict()
        # override the default output from pydantic by calling `to_dict()` of predicate
        if self.predicate:
            _dict['predicate'] = self.predicate.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Statement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boolean": obj.get("boolean"),
            "byte": obj.get("byte"),
            "short": obj.get("short"),
            "char": obj.get("char"),
            "int": obj.get("int"),
            "long": obj.get("long"),
            "float": obj.get("float"),
            "double": obj.get("double"),
            "resource": Resource.from_dict(obj["resource"]) if obj.get("resource") is not None else None,
            "object": RDFNode.from_dict(obj["object"]) if obj.get("object") is not None else None,
            "language": obj.get("language"),
            "string": obj.get("string"),
            "list": RDFList.from_dict(obj["list"]) if obj.get("list") is not None else None,
            "model": Model.from_dict(obj["model"]) if obj.get("model") is not None else None,
            "subject": Resource.from_dict(obj["subject"]) if obj.get("subject") is not None else None,
            "literal": Literal.from_dict(obj["literal"]) if obj.get("literal") is not None else None,
            "bag": Bag.from_dict(obj["bag"]) if obj.get("bag") is not None else None,
            "alt": Alt.from_dict(obj["alt"]) if obj.get("alt") is not None else None,
            "seq": Seq.from_dict(obj["seq"]) if obj.get("seq") is not None else None,
            "predicate": ModelProperty.from_dict(obj["predicate"]) if obj.get("predicate") is not None else None,
            "reified": obj.get("reified")
        })
        return _obj

from openapi_client.models.alt import Alt
from openapi_client.models.bag import Bag
from openapi_client.models.model_property import ModelProperty
from openapi_client.models.rdf_list import RDFList
from openapi_client.models.resource import Resource
from openapi_client.models.seq import Seq
# TODO: Rewrite to not use raise_errors
Statement.model_rebuild(raise_errors=False)

