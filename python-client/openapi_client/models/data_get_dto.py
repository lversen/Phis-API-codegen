# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.data_provenance_model import DataProvenanceModel
from typing import Optional, Set
from typing_extensions import Self

class DataGetDTO(BaseModel):
    """
    DataGetDTO
    """ # noqa: E501
    uri: StrictStr = Field(description="data URI")
    var_date: StrictStr = Field(description="date or datetime", alias="date")
    target: Optional[StrictStr] = Field(default=None, description="target URI on which the data have been collected (e.g. a scientific object)")
    variable: StrictStr = Field(description="variable URI")
    value: Dict[str, Any] = Field(description="can be decimal, integer, boolean, string or date")
    confidence: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(default=None, description="confidence index")
    provenance: DataProvenanceModel
    metadata: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="key-value system to store additional information that can be used to query data")
    raw_data: Optional[List[Dict[str, Any]]] = Field(default=None, description="list of repetition values")
    issued: Optional[datetime] = None
    modified: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["uri", "date", "target", "variable", "value", "confidence", "provenance", "metadata", "raw_data", "issued", "modified"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataGetDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of provenance
        if self.provenance:
            _dict['provenance'] = self.provenance.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataGetDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uri": obj.get("uri"),
            "date": obj.get("date"),
            "target": obj.get("target"),
            "variable": obj.get("variable"),
            "value": obj.get("value"),
            "confidence": obj.get("confidence"),
            "provenance": DataProvenanceModel.from_dict(obj["provenance"]) if obj.get("provenance") is not None else None,
            "metadata": obj.get("metadata"),
            "raw_data": obj.get("raw_data"),
            "issued": obj.get("issued"),
            "modified": obj.get("modified")
        })
        return _obj


