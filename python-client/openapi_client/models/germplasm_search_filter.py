# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.order_by import OrderBy
from typing import Optional, Set
from typing_extensions import Self

class GermplasmSearchFilter(BaseModel):
    """
    GermplasmSearchFilter
    """ # noqa: E501
    included_uris: Optional[List[StrictStr]] = Field(default=None, alias="includedUris")
    rdf_types: Optional[List[StrictStr]] = Field(default=None, alias="rdfTypes")
    page: Optional[StrictInt] = Field(default=None, description="Page number")
    lang: Optional[StrictStr] = None
    uri: Optional[StrictStr] = Field(default=None, description="Regex pattern for filtering list by uri")
    name: Optional[StrictStr] = Field(default=None, description="Regex pattern for filtering list by name and synonyms")
    code: Optional[StrictStr] = Field(default=None, description="Regex pattern for filtering list by code")
    species: Optional[StrictStr] = Field(default=None, description="Search by species")
    variety: Optional[StrictStr] = Field(default=None, description="Search by variety")
    accession: Optional[StrictStr] = Field(default=None, description="Search by accession")
    institute: Optional[StrictStr] = Field(default=None, description="Search by institute")
    experiment: Optional[StrictStr] = Field(default=None, description="Search by experiment")
    metadata: Optional[StrictStr] = Field(default=None, description="Search by metadata")
    uris: Optional[List[StrictStr]] = Field(default=None, description="List of germplasm URI")
    group: Optional[StrictStr] = Field(default=None, description="Search by germplasm group")
    parent_germplasms: Optional[List[StrictStr]] = Field(default=None, alias="parentGermplasms")
    parent_m_germplasms: Optional[List[StrictStr]] = Field(default=None, alias="parentMGermplasms")
    parent_f_germplasms: Optional[List[StrictStr]] = Field(default=None, alias="parentFGermplasms")
    order_by: Optional[List[OrderBy]] = Field(default=None, description="List of fields to sort as an array of fieldName=asc|desc")
    page_size: Optional[StrictInt] = Field(default=None, description="Page size")
    rdf_type: Optional[StrictStr] = Field(default=None, description="Search by type")
    production_year: Optional[StrictInt] = Field(default=None, description="Search by production year")
    __properties: ClassVar[List[str]] = ["includedUris", "rdfTypes", "page", "lang", "uri", "name", "code", "species", "variety", "accession", "institute", "experiment", "metadata", "uris", "group", "parentGermplasms", "parentMGermplasms", "parentFGermplasms", "order_by", "page_size", "rdf_type", "production_year"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GermplasmSearchFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in order_by (list)
        _items = []
        if self.order_by:
            for _item_order_by in self.order_by:
                if _item_order_by:
                    _items.append(_item_order_by.to_dict())
            _dict['order_by'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GermplasmSearchFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "includedUris": obj.get("includedUris"),
            "rdfTypes": obj.get("rdfTypes"),
            "page": obj.get("page"),
            "lang": obj.get("lang"),
            "uri": obj.get("uri"),
            "name": obj.get("name"),
            "code": obj.get("code"),
            "species": obj.get("species"),
            "variety": obj.get("variety"),
            "accession": obj.get("accession"),
            "institute": obj.get("institute"),
            "experiment": obj.get("experiment"),
            "metadata": obj.get("metadata"),
            "uris": obj.get("uris"),
            "group": obj.get("group"),
            "parentGermplasms": obj.get("parentGermplasms"),
            "parentMGermplasms": obj.get("parentMGermplasms"),
            "parentFGermplasms": obj.get("parentFGermplasms"),
            "order_by": [OrderBy.from_dict(_item) for _item in obj["order_by"]] if obj.get("order_by") is not None else None,
            "page_size": obj.get("page_size"),
            "rdf_type": obj.get("rdf_type"),
            "production_year": obj.get("production_year")
        })
        return _obj


