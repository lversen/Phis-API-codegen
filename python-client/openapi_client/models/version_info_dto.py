# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.api_contact_info_dto import ApiContactInfoDTO
from openapi_client.models.api_external_docs_dto import ApiExternalDocsDTO
from openapi_client.models.api_git_commit_dto import ApiGitCommitDTO
from openapi_client.models.api_license_info_dto import ApiLicenseInfoDTO
from openapi_client.models.api_modules_info import ApiModulesInfo
from typing import Optional, Set
from typing_extensions import Self

class VersionInfoDTO(BaseModel):
    """
    VersionInfoDTO
    """ # noqa: E501
    title: Optional[StrictStr] = Field(default=None, description="Opensilex instance name")
    version: Optional[StrictStr] = Field(default=None, description="Opensilex API version")
    description: Optional[StrictStr] = Field(default=None, description="Opensilex description")
    contact: Optional[ApiContactInfoDTO] = None
    license: Optional[ApiLicenseInfoDTO] = None
    modules_version: Optional[List[ApiModulesInfo]] = None
    external_docs: Optional[ApiExternalDocsDTO] = None
    api_docs: Optional[ApiExternalDocsDTO] = None
    git_commit: Optional[ApiGitCommitDTO] = None
    github_page: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["title", "version", "description", "contact", "license", "modules_version", "external_docs", "api_docs", "git_commit", "github_page"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VersionInfoDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contact
        if self.contact:
            _dict['contact'] = self.contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of license
        if self.license:
            _dict['license'] = self.license.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in modules_version (list)
        _items = []
        if self.modules_version:
            for _item_modules_version in self.modules_version:
                if _item_modules_version:
                    _items.append(_item_modules_version.to_dict())
            _dict['modules_version'] = _items
        # override the default output from pydantic by calling `to_dict()` of external_docs
        if self.external_docs:
            _dict['external_docs'] = self.external_docs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of api_docs
        if self.api_docs:
            _dict['api_docs'] = self.api_docs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of git_commit
        if self.git_commit:
            _dict['git_commit'] = self.git_commit.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VersionInfoDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "version": obj.get("version"),
            "description": obj.get("description"),
            "contact": ApiContactInfoDTO.from_dict(obj["contact"]) if obj.get("contact") is not None else None,
            "license": ApiLicenseInfoDTO.from_dict(obj["license"]) if obj.get("license") is not None else None,
            "modules_version": [ApiModulesInfo.from_dict(_item) for _item in obj["modules_version"]] if obj.get("modules_version") is not None else None,
            "external_docs": ApiExternalDocsDTO.from_dict(obj["external_docs"]) if obj.get("external_docs") is not None else None,
            "api_docs": ApiExternalDocsDTO.from_dict(obj["api_docs"]) if obj.get("api_docs") is not None else None,
            "git_commit": ApiGitCommitDTO.from_dict(obj["git_commit"]) if obj.get("git_commit") is not None else None,
            "github_page": obj.get("github_page")
        })
        return _obj


