# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.faidarev1_method_dto import Faidarev1MethodDTO
from openapi_client.models.faidarev1_scale_dto import Faidarev1ScaleDTO
from openapi_client.models.faidarev1_trait_dto import Faidarev1TraitDTO
from typing import Optional, Set
from typing_extensions import Self

class Faidarev1ObservationVariableDTO(BaseModel):
    """
    Faidarev1ObservationVariableDTO
    """ # noqa: E501
    context_of_use: Optional[List[StrictStr]] = Field(default=None, alias="contextOfUse")
    crop: Optional[StrictStr] = None
    default_value: Optional[StrictStr] = Field(default=None, alias="defaultValue")
    documentation_url: Optional[StrictStr] = Field(default=None, alias="documentationURL")
    growth_stage: Optional[StrictStr] = Field(default=None, alias="growthStage")
    institution: Optional[StrictStr] = None
    language: Optional[StrictStr] = None
    method: Optional[Faidarev1MethodDTO] = None
    scale: Optional[Faidarev1ScaleDTO] = None
    scientist: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    synonyms: Optional[List[StrictStr]] = None
    trait: Optional[Faidarev1TraitDTO] = None
    xref: Optional[StrictStr] = None
    observation_variable_db_id: Optional[StrictStr] = Field(default=None, alias="observationVariableDbId")
    name: Optional[StrictStr] = None
    var_date: Optional[StrictStr] = Field(default=None, alias="date")
    ontology_db_id: Optional[StrictStr] = Field(default=None, alias="ontologyDbId")
    ontology_name: Optional[StrictStr] = Field(default=None, alias="ontologyName")
    __properties: ClassVar[List[str]] = ["contextOfUse", "crop", "defaultValue", "documentationURL", "growthStage", "institution", "language", "method", "scale", "scientist", "status", "synonyms", "trait", "xref", "observationVariableDbId", "name", "date", "ontologyDbId", "ontologyName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Faidarev1ObservationVariableDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of method
        if self.method:
            _dict['method'] = self.method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scale
        if self.scale:
            _dict['scale'] = self.scale.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trait
        if self.trait:
            _dict['trait'] = self.trait.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Faidarev1ObservationVariableDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contextOfUse": obj.get("contextOfUse"),
            "crop": obj.get("crop"),
            "defaultValue": obj.get("defaultValue"),
            "documentationURL": obj.get("documentationURL"),
            "growthStage": obj.get("growthStage"),
            "institution": obj.get("institution"),
            "language": obj.get("language"),
            "method": Faidarev1MethodDTO.from_dict(obj["method"]) if obj.get("method") is not None else None,
            "scale": Faidarev1ScaleDTO.from_dict(obj["scale"]) if obj.get("scale") is not None else None,
            "scientist": obj.get("scientist"),
            "status": obj.get("status"),
            "synonyms": obj.get("synonyms"),
            "trait": Faidarev1TraitDTO.from_dict(obj["trait"]) if obj.get("trait") is not None else None,
            "xref": obj.get("xref"),
            "observationVariableDbId": obj.get("observationVariableDbId"),
            "name": obj.get("name"),
            "date": obj.get("date"),
            "ontologyDbId": obj.get("ontologyDbId"),
            "ontologyName": obj.get("ontologyName")
        })
        return _obj


