# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ExperimentCreationDTO(BaseModel):
    """
    ExperimentCreationDTO
    """ # noqa: E501
    uri: Optional[StrictStr] = None
    name: StrictStr
    start_date: date
    end_date: Optional[date] = None
    description: Optional[StrictStr] = None
    objective: StrictStr
    organisations: Optional[List[StrictStr]] = None
    facilities: Optional[List[StrictStr]] = None
    projects: Optional[List[StrictStr]] = None
    scientific_supervisors: Optional[List[StrictStr]] = None
    technical_supervisors: Optional[List[StrictStr]] = None
    groups: Optional[List[StrictStr]] = None
    factors: Optional[List[StrictStr]] = None
    is_public: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["uri", "name", "start_date", "end_date", "description", "objective", "organisations", "facilities", "projects", "scientific_supervisors", "technical_supervisors", "groups", "factors", "is_public"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExperimentCreationDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExperimentCreationDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uri": obj.get("uri"),
            "name": obj.get("name"),
            "start_date": obj.get("start_date"),
            "end_date": obj.get("end_date"),
            "description": obj.get("description"),
            "objective": obj.get("objective"),
            "organisations": obj.get("organisations"),
            "facilities": obj.get("facilities"),
            "projects": obj.get("projects"),
            "scientific_supervisors": obj.get("scientific_supervisors"),
            "technical_supervisors": obj.get("technical_supervisors"),
            "groups": obj.get("groups"),
            "factors": obj.get("factors"),
            "is_public": obj.get("is_public")
        })
        return _obj


