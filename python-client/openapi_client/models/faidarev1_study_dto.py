# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.faidarev1_contact_dto import Faidarev1ContactDTO
from openapi_client.models.faidarev1_data_link_dto import Faidarev1DataLinkDTO
from openapi_client.models.faidarev1_last_update_dto import Faidarev1LastUpdateDTO
from typing import Optional, Set
from typing_extensions import Self

class Faidarev1StudyDTO(BaseModel):
    """
    Faidarev1StudyDTO
    """ # noqa: E501
    active: Optional[StrictStr] = None
    additional_info: Optional[Dict[str, StrictStr]] = Field(default=None, alias="additionalInfo")
    documentation_url: Optional[StrictStr] = Field(default=None, alias="documentationURL")
    end_date: Optional[StrictStr] = Field(default=None, alias="endDate")
    location_db_id: Optional[StrictStr] = Field(default=None, alias="locationDbId")
    location_name: Optional[StrictStr] = Field(default=None, alias="locationName")
    last_update: Optional[Faidarev1LastUpdateDTO] = Field(default=None, alias="lastUpdate")
    name: Optional[StrictStr] = None
    program_db_id: Optional[StrictStr] = Field(default=None, alias="programDbId")
    program_name: Optional[StrictStr] = Field(default=None, alias="programName")
    start_date: Optional[StrictStr] = Field(default=None, alias="startDate")
    study_type: Optional[StrictStr] = Field(default=None, alias="studyType")
    study_db_id: Optional[StrictStr] = Field(default=None, alias="studyDbId")
    study_name: Optional[StrictStr] = Field(default=None, alias="studyName")
    trial_db_id: Optional[StrictStr] = Field(default=None, alias="trialDbId")
    trial_name: Optional[StrictStr] = Field(default=None, alias="trialName")
    trial_db_ids: Optional[List[StrictStr]] = Field(default=None, alias="trialDbIds")
    contacts: Optional[List[Faidarev1ContactDTO]] = None
    data_links: Optional[List[Faidarev1DataLinkDTO]] = Field(default=None, alias="dataLinks")
    study_description: Optional[StrictStr] = Field(default=None, alias="studyDescription")
    seasons: Optional[List[StrictStr]] = None
    observation_variable_db_ids: Optional[List[StrictStr]] = Field(default=None, alias="observationVariableDbIds")
    germplasm_db_ids: Optional[List[StrictStr]] = Field(default=None, alias="germplasmDbIds")
    __properties: ClassVar[List[str]] = ["active", "additionalInfo", "documentationURL", "endDate", "locationDbId", "locationName", "lastUpdate", "name", "programDbId", "programName", "startDate", "studyType", "studyDbId", "studyName", "trialDbId", "trialName", "trialDbIds", "contacts", "dataLinks", "studyDescription", "seasons", "observationVariableDbIds", "germplasmDbIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Faidarev1StudyDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of last_update
        if self.last_update:
            _dict['lastUpdate'] = self.last_update.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in contacts (list)
        _items = []
        if self.contacts:
            for _item_contacts in self.contacts:
                if _item_contacts:
                    _items.append(_item_contacts.to_dict())
            _dict['contacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in data_links (list)
        _items = []
        if self.data_links:
            for _item_data_links in self.data_links:
                if _item_data_links:
                    _items.append(_item_data_links.to_dict())
            _dict['dataLinks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Faidarev1StudyDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "additionalInfo": obj.get("additionalInfo"),
            "documentationURL": obj.get("documentationURL"),
            "endDate": obj.get("endDate"),
            "locationDbId": obj.get("locationDbId"),
            "locationName": obj.get("locationName"),
            "lastUpdate": Faidarev1LastUpdateDTO.from_dict(obj["lastUpdate"]) if obj.get("lastUpdate") is not None else None,
            "name": obj.get("name"),
            "programDbId": obj.get("programDbId"),
            "programName": obj.get("programName"),
            "startDate": obj.get("startDate"),
            "studyType": obj.get("studyType"),
            "studyDbId": obj.get("studyDbId"),
            "studyName": obj.get("studyName"),
            "trialDbId": obj.get("trialDbId"),
            "trialName": obj.get("trialName"),
            "trialDbIds": obj.get("trialDbIds"),
            "contacts": [Faidarev1ContactDTO.from_dict(_item) for _item in obj["contacts"]] if obj.get("contacts") is not None else None,
            "dataLinks": [Faidarev1DataLinkDTO.from_dict(_item) for _item in obj["dataLinks"]] if obj.get("dataLinks") is not None else None,
            "studyDescription": obj.get("studyDescription"),
            "seasons": obj.get("seasons"),
            "observationVariableDbIds": obj.get("observationVariableDbIds"),
            "germplasmDbIds": obj.get("germplasmDbIds")
        })
        return _obj


