# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.characteristic_get_dto import CharacteristicGetDTO
from openapi_client.models.entity_get_dto import EntityGetDTO
from openapi_client.models.method_get_dto import MethodGetDTO
from openapi_client.models.named_resource_dto import NamedResourceDTO
from openapi_client.models.shared_resource_instance_dto import SharedResourceInstanceDTO
from openapi_client.models.unit_get_dto import UnitGetDTO
from typing import Optional, Set
from typing_extensions import Self

class VariableGetDTO(BaseModel):
    """
    VariableGetDTO
    """ # noqa: E501
    uri: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    entity: Optional[EntityGetDTO] = None
    entity_of_interest: Optional[NamedResourceDTO] = None
    characteristic: Optional[CharacteristicGetDTO] = None
    method: Optional[MethodGetDTO] = None
    unit: Optional[UnitGetDTO] = None
    on_local: Optional[StrictBool] = Field(default=None, alias="onLocal")
    shared_resource_instance: Optional[SharedResourceInstanceDTO] = Field(default=None, alias="sharedResourceInstance")
    alternative_name: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["uri", "name", "entity", "entity_of_interest", "characteristic", "method", "unit", "onLocal", "sharedResourceInstance", "alternative_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VariableGetDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of entity
        if self.entity:
            _dict['entity'] = self.entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity_of_interest
        if self.entity_of_interest:
            _dict['entity_of_interest'] = self.entity_of_interest.to_dict()
        # override the default output from pydantic by calling `to_dict()` of characteristic
        if self.characteristic:
            _dict['characteristic'] = self.characteristic.to_dict()
        # override the default output from pydantic by calling `to_dict()` of method
        if self.method:
            _dict['method'] = self.method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unit
        if self.unit:
            _dict['unit'] = self.unit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shared_resource_instance
        if self.shared_resource_instance:
            _dict['sharedResourceInstance'] = self.shared_resource_instance.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VariableGetDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uri": obj.get("uri"),
            "name": obj.get("name"),
            "entity": EntityGetDTO.from_dict(obj["entity"]) if obj.get("entity") is not None else None,
            "entity_of_interest": NamedResourceDTO.from_dict(obj["entity_of_interest"]) if obj.get("entity_of_interest") is not None else None,
            "characteristic": CharacteristicGetDTO.from_dict(obj["characteristic"]) if obj.get("characteristic") is not None else None,
            "method": MethodGetDTO.from_dict(obj["method"]) if obj.get("method") is not None else None,
            "unit": UnitGetDTO.from_dict(obj["unit"]) if obj.get("unit") is not None else None,
            "onLocal": obj.get("onLocal"),
            "sharedResourceInstance": SharedResourceInstanceDTO.from_dict(obj["sharedResourceInstance"]) if obj.get("sharedResourceInstance") is not None else None,
            "alternative_name": obj.get("alternative_name")
        })
        return _obj


