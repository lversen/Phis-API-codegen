# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_computed_get_dto import DataComputedGetDTO
from openapi_client.models.data_serie_get_dto import DataSerieGetDTO
from openapi_client.models.data_simple_provenance_get_dto import DataSimpleProvenanceGetDTO
from openapi_client.models.device_get_dto import DeviceGetDTO
from openapi_client.models.variable_details_dto import VariableDetailsDTO
from typing import Optional, Set
from typing_extensions import Self

class DataVariableSeriesGetDTO(BaseModel):
    """
    DataVariableSeriesGetDTO
    """ # noqa: E501
    variable: Optional[VariableDetailsDTO] = None
    provenances: Optional[List[DataSimpleProvenanceGetDTO]] = None
    devices: Optional[List[DeviceGetDTO]] = None
    data_series: Optional[List[DataSerieGetDTO]] = None
    calculated_series: Optional[List[DataSerieGetDTO]] = None
    last_data_stored: Optional[DataComputedGetDTO] = None
    __properties: ClassVar[List[str]] = ["variable", "provenances", "devices", "data_series", "calculated_series", "last_data_stored"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataVariableSeriesGetDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of variable
        if self.variable:
            _dict['variable'] = self.variable.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in provenances (list)
        _items = []
        if self.provenances:
            for _item_provenances in self.provenances:
                if _item_provenances:
                    _items.append(_item_provenances.to_dict())
            _dict['provenances'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in devices (list)
        _items = []
        if self.devices:
            for _item_devices in self.devices:
                if _item_devices:
                    _items.append(_item_devices.to_dict())
            _dict['devices'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in data_series (list)
        _items = []
        if self.data_series:
            for _item_data_series in self.data_series:
                if _item_data_series:
                    _items.append(_item_data_series.to_dict())
            _dict['data_series'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in calculated_series (list)
        _items = []
        if self.calculated_series:
            for _item_calculated_series in self.calculated_series:
                if _item_calculated_series:
                    _items.append(_item_calculated_series.to_dict())
            _dict['calculated_series'] = _items
        # override the default output from pydantic by calling `to_dict()` of last_data_stored
        if self.last_data_stored:
            _dict['last_data_stored'] = self.last_data_stored.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataVariableSeriesGetDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "variable": VariableDetailsDTO.from_dict(obj["variable"]) if obj.get("variable") is not None else None,
            "provenances": [DataSimpleProvenanceGetDTO.from_dict(_item) for _item in obj["provenances"]] if obj.get("provenances") is not None else None,
            "devices": [DeviceGetDTO.from_dict(_item) for _item in obj["devices"]] if obj.get("devices") is not None else None,
            "data_series": [DataSerieGetDTO.from_dict(_item) for _item in obj["data_series"]] if obj.get("data_series") is not None else None,
            "calculated_series": [DataSerieGetDTO.from_dict(_item) for _item in obj["calculated_series"]] if obj.get("calculated_series") is not None else None,
            "last_data_stored": DataComputedGetDTO.from_dict(obj["last_data_stored"]) if obj.get("last_data_stored") is not None else None
        })
        return _obj


