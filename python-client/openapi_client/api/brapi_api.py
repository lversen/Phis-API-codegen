# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.br_apiv1_call_list_response import BrAPIv1CallListResponse
from openapi_client.models.br_apiv1_germplasm_list_response import BrAPIv1GermplasmListResponse
from openapi_client.models.br_apiv1_observation_list_response import BrAPIv1ObservationListResponse
from openapi_client.models.br_apiv1_observation_unit_list_response import BrAPIv1ObservationUnitListResponse
from openapi_client.models.br_apiv1_observation_variable_list_response import BrAPIv1ObservationVariableListResponse
from openapi_client.models.br_apiv1_single_observation_variable_response import BrAPIv1SingleObservationVariableResponse
from openapi_client.models.br_apiv1_single_study_response import BrAPIv1SingleStudyResponse
from openapi_client.models.br_apiv1_study_list_response import BrAPIv1StudyListResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class BRAPIApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_calls(
        self,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page size")] = None,
        data_type: Annotated[Optional[StrictStr], Field(description="datatype")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BrAPIv1CallListResponse:
        """Check the available BrAPI calls

        Check the available BrAPI calls

        :param page: Page number
        :type page: int
        :param page_size: Page size
        :type page_size: int
        :param data_type: datatype
        :type data_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_calls_serialize(
            page=page,
            page_size=page_size,
            data_type=data_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1CallListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_calls_with_http_info(
        self,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page size")] = None,
        data_type: Annotated[Optional[StrictStr], Field(description="datatype")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BrAPIv1CallListResponse]:
        """Check the available BrAPI calls

        Check the available BrAPI calls

        :param page: Page number
        :type page: int
        :param page_size: Page size
        :type page_size: int
        :param data_type: datatype
        :type data_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_calls_serialize(
            page=page,
            page_size=page_size,
            data_type=data_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1CallListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_calls_without_preload_content(
        self,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page size")] = None,
        data_type: Annotated[Optional[StrictStr], Field(description="datatype")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Check the available BrAPI calls

        Check the available BrAPI calls

        :param page: Page number
        :type page: int
        :param page_size: Page size
        :type page_size: int
        :param data_type: datatype
        :type data_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_calls_serialize(
            page=page,
            page_size=page_size,
            data_type=data_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1CallListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_calls_serialize(
        self,
        page,
        page_size,
        data_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if data_type is not None:
            
            _query_params.append(('dataType', data_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/brapi/v1/calls',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_germplasm_by_search(
        self,
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        germplasm_db_id: Annotated[Optional[StrictStr], Field(description="Search by germplasmDbId (URI of an OpenSilex accession)")] = None,
        germplasm_pui: Annotated[Optional[StrictStr], Field(description="Search by germplasmPUI (URI of an OpenSilex accession)")] = None,
        germplasm_name: Annotated[Optional[StrictStr], Field(description="Search by germplasmName (name of an OpenSilex accession)")] = None,
        common_crop_name: Annotated[Optional[StrictStr], Field(description="Search by commonCropName (name of the species of an OpenSilex accession)")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page size")] = None,
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BrAPIv1GermplasmListResponse:
        """Submit a search request for germplasm (type accession in OpenSILEX


        :param authorization: Authentication token (required)
        :type authorization: str
        :param germplasm_db_id: Search by germplasmDbId (URI of an OpenSilex accession)
        :type germplasm_db_id: str
        :param germplasm_pui: Search by germplasmPUI (URI of an OpenSilex accession)
        :type germplasm_pui: str
        :param germplasm_name: Search by germplasmName (name of an OpenSilex accession)
        :type germplasm_name: str
        :param common_crop_name: Search by commonCropName (name of the species of an OpenSilex accession)
        :type common_crop_name: str
        :param page: Page number
        :type page: int
        :param page_size: Page size
        :type page_size: int
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_germplasm_by_search_serialize(
            authorization=authorization,
            germplasm_db_id=germplasm_db_id,
            germplasm_pui=germplasm_pui,
            germplasm_name=germplasm_name,
            common_crop_name=common_crop_name,
            page=page,
            page_size=page_size,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1GermplasmListResponse",
            '400': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_germplasm_by_search_with_http_info(
        self,
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        germplasm_db_id: Annotated[Optional[StrictStr], Field(description="Search by germplasmDbId (URI of an OpenSilex accession)")] = None,
        germplasm_pui: Annotated[Optional[StrictStr], Field(description="Search by germplasmPUI (URI of an OpenSilex accession)")] = None,
        germplasm_name: Annotated[Optional[StrictStr], Field(description="Search by germplasmName (name of an OpenSilex accession)")] = None,
        common_crop_name: Annotated[Optional[StrictStr], Field(description="Search by commonCropName (name of the species of an OpenSilex accession)")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page size")] = None,
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BrAPIv1GermplasmListResponse]:
        """Submit a search request for germplasm (type accession in OpenSILEX


        :param authorization: Authentication token (required)
        :type authorization: str
        :param germplasm_db_id: Search by germplasmDbId (URI of an OpenSilex accession)
        :type germplasm_db_id: str
        :param germplasm_pui: Search by germplasmPUI (URI of an OpenSilex accession)
        :type germplasm_pui: str
        :param germplasm_name: Search by germplasmName (name of an OpenSilex accession)
        :type germplasm_name: str
        :param common_crop_name: Search by commonCropName (name of the species of an OpenSilex accession)
        :type common_crop_name: str
        :param page: Page number
        :type page: int
        :param page_size: Page size
        :type page_size: int
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_germplasm_by_search_serialize(
            authorization=authorization,
            germplasm_db_id=germplasm_db_id,
            germplasm_pui=germplasm_pui,
            germplasm_name=germplasm_name,
            common_crop_name=common_crop_name,
            page=page,
            page_size=page_size,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1GermplasmListResponse",
            '400': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_germplasm_by_search_without_preload_content(
        self,
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        germplasm_db_id: Annotated[Optional[StrictStr], Field(description="Search by germplasmDbId (URI of an OpenSilex accession)")] = None,
        germplasm_pui: Annotated[Optional[StrictStr], Field(description="Search by germplasmPUI (URI of an OpenSilex accession)")] = None,
        germplasm_name: Annotated[Optional[StrictStr], Field(description="Search by germplasmName (name of an OpenSilex accession)")] = None,
        common_crop_name: Annotated[Optional[StrictStr], Field(description="Search by commonCropName (name of the species of an OpenSilex accession)")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page size")] = None,
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Submit a search request for germplasm (type accession in OpenSILEX


        :param authorization: Authentication token (required)
        :type authorization: str
        :param germplasm_db_id: Search by germplasmDbId (URI of an OpenSilex accession)
        :type germplasm_db_id: str
        :param germplasm_pui: Search by germplasmPUI (URI of an OpenSilex accession)
        :type germplasm_pui: str
        :param germplasm_name: Search by germplasmName (name of an OpenSilex accession)
        :type germplasm_name: str
        :param common_crop_name: Search by commonCropName (name of the species of an OpenSilex accession)
        :type common_crop_name: str
        :param page: Page number
        :type page: int
        :param page_size: Page size
        :type page_size: int
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_germplasm_by_search_serialize(
            authorization=authorization,
            germplasm_db_id=germplasm_db_id,
            germplasm_pui=germplasm_pui,
            germplasm_name=germplasm_name,
            common_crop_name=common_crop_name,
            page=page,
            page_size=page_size,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1GermplasmListResponse",
            '400': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_germplasm_by_search_serialize(
        self,
        authorization,
        germplasm_db_id,
        germplasm_pui,
        germplasm_name,
        common_crop_name,
        page,
        page_size,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if germplasm_db_id is not None:
            
            _query_params.append(('germplasmDbId', germplasm_db_id))
            
        if germplasm_pui is not None:
            
            _query_params.append(('germplasmPUI', germplasm_pui))
            
        if germplasm_name is not None:
            
            _query_params.append(('germplasmName', germplasm_name))
            
        if common_crop_name is not None:
            
            _query_params.append(('commonCropName', common_crop_name))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if accept_language is not None:
            _header_params['Accept-Language'] = accept_language
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/brapi/v1/germplasm',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_observation_units(
        self,
        study_db_id: Annotated[StrictStr, Field(description="studyDbId")],
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        observation_level: Annotated[Optional[StrictStr], Field(description="observationLevel")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="pageSize")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="page")] = None,
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BrAPIv1ObservationUnitListResponse:
        """List all the observation units measured in the study.

        List all the observation units measured in the study.

        :param study_db_id: studyDbId (required)
        :type study_db_id: str
        :param authorization: Authentication token (required)
        :type authorization: str
        :param observation_level: observationLevel
        :type observation_level: str
        :param page_size: pageSize
        :type page_size: int
        :param page: page
        :type page: int
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_observation_units_serialize(
            study_db_id=study_db_id,
            authorization=authorization,
            observation_level=observation_level,
            page_size=page_size,
            page=page,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1ObservationUnitListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_observation_units_with_http_info(
        self,
        study_db_id: Annotated[StrictStr, Field(description="studyDbId")],
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        observation_level: Annotated[Optional[StrictStr], Field(description="observationLevel")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="pageSize")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="page")] = None,
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BrAPIv1ObservationUnitListResponse]:
        """List all the observation units measured in the study.

        List all the observation units measured in the study.

        :param study_db_id: studyDbId (required)
        :type study_db_id: str
        :param authorization: Authentication token (required)
        :type authorization: str
        :param observation_level: observationLevel
        :type observation_level: str
        :param page_size: pageSize
        :type page_size: int
        :param page: page
        :type page: int
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_observation_units_serialize(
            study_db_id=study_db_id,
            authorization=authorization,
            observation_level=observation_level,
            page_size=page_size,
            page=page,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1ObservationUnitListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_observation_units_without_preload_content(
        self,
        study_db_id: Annotated[StrictStr, Field(description="studyDbId")],
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        observation_level: Annotated[Optional[StrictStr], Field(description="observationLevel")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="pageSize")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="page")] = None,
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all the observation units measured in the study.

        List all the observation units measured in the study.

        :param study_db_id: studyDbId (required)
        :type study_db_id: str
        :param authorization: Authentication token (required)
        :type authorization: str
        :param observation_level: observationLevel
        :type observation_level: str
        :param page_size: pageSize
        :type page_size: int
        :param page: page
        :type page: int
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_observation_units_serialize(
            study_db_id=study_db_id,
            authorization=authorization,
            observation_level=observation_level,
            page_size=page_size,
            page=page,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1ObservationUnitListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_observation_units_serialize(
        self,
        study_db_id,
        authorization,
        observation_level,
        page_size,
        page,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if study_db_id is not None:
            _path_params['studyDbId'] = study_db_id
        # process the query parameters
        if observation_level is not None:
            
            _query_params.append(('observationLevel', observation_level))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if accept_language is not None:
            _header_params['Accept-Language'] = accept_language
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/brapi/v1/studies/{studyDbId}/observationunits',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_observation_variables(
        self,
        study_db_id: Annotated[StrictStr, Field(description="studyDbId")],
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        page_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="pageSize")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="page")] = None,
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BrAPIv1ObservationVariableListResponse:
        """List all the observation variables measured in the study.

        List all the observation variables measured in the study.

        :param study_db_id: studyDbId (required)
        :type study_db_id: str
        :param authorization: Authentication token (required)
        :type authorization: str
        :param page_size: pageSize
        :type page_size: int
        :param page: page
        :type page: int
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_observation_variables_serialize(
            study_db_id=study_db_id,
            authorization=authorization,
            page_size=page_size,
            page=page,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1ObservationVariableListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_observation_variables_with_http_info(
        self,
        study_db_id: Annotated[StrictStr, Field(description="studyDbId")],
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        page_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="pageSize")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="page")] = None,
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BrAPIv1ObservationVariableListResponse]:
        """List all the observation variables measured in the study.

        List all the observation variables measured in the study.

        :param study_db_id: studyDbId (required)
        :type study_db_id: str
        :param authorization: Authentication token (required)
        :type authorization: str
        :param page_size: pageSize
        :type page_size: int
        :param page: page
        :type page: int
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_observation_variables_serialize(
            study_db_id=study_db_id,
            authorization=authorization,
            page_size=page_size,
            page=page,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1ObservationVariableListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_observation_variables_without_preload_content(
        self,
        study_db_id: Annotated[StrictStr, Field(description="studyDbId")],
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        page_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="pageSize")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="page")] = None,
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all the observation variables measured in the study.

        List all the observation variables measured in the study.

        :param study_db_id: studyDbId (required)
        :type study_db_id: str
        :param authorization: Authentication token (required)
        :type authorization: str
        :param page_size: pageSize
        :type page_size: int
        :param page: page
        :type page: int
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_observation_variables_serialize(
            study_db_id=study_db_id,
            authorization=authorization,
            page_size=page_size,
            page=page,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1ObservationVariableListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_observation_variables_serialize(
        self,
        study_db_id,
        authorization,
        page_size,
        page,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if study_db_id is not None:
            _path_params['studyDbId'] = study_db_id
        # process the query parameters
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if accept_language is not None:
            _header_params['Accept-Language'] = accept_language
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/brapi/v1/studies/{studyDbId}/observationvariables',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_observations(
        self,
        study_db_id: Annotated[StrictStr, Field(description="studyDbId")],
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        observation_variable_db_ids: Annotated[Optional[List[StrictStr]], Field(description="observationVariableDbIds")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="pageSize")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="page")] = None,
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BrAPIv1ObservationListResponse:
        """Get the observations associated to a specific study

        Get the observations associated to a specific study

        :param study_db_id: studyDbId (required)
        :type study_db_id: str
        :param authorization: Authentication token (required)
        :type authorization: str
        :param observation_variable_db_ids: observationVariableDbIds
        :type observation_variable_db_ids: List[str]
        :param page_size: pageSize
        :type page_size: int
        :param page: page
        :type page: int
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_observations_serialize(
            study_db_id=study_db_id,
            authorization=authorization,
            observation_variable_db_ids=observation_variable_db_ids,
            page_size=page_size,
            page=page,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1ObservationListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_observations_with_http_info(
        self,
        study_db_id: Annotated[StrictStr, Field(description="studyDbId")],
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        observation_variable_db_ids: Annotated[Optional[List[StrictStr]], Field(description="observationVariableDbIds")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="pageSize")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="page")] = None,
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BrAPIv1ObservationListResponse]:
        """Get the observations associated to a specific study

        Get the observations associated to a specific study

        :param study_db_id: studyDbId (required)
        :type study_db_id: str
        :param authorization: Authentication token (required)
        :type authorization: str
        :param observation_variable_db_ids: observationVariableDbIds
        :type observation_variable_db_ids: List[str]
        :param page_size: pageSize
        :type page_size: int
        :param page: page
        :type page: int
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_observations_serialize(
            study_db_id=study_db_id,
            authorization=authorization,
            observation_variable_db_ids=observation_variable_db_ids,
            page_size=page_size,
            page=page,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1ObservationListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_observations_without_preload_content(
        self,
        study_db_id: Annotated[StrictStr, Field(description="studyDbId")],
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        observation_variable_db_ids: Annotated[Optional[List[StrictStr]], Field(description="observationVariableDbIds")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="pageSize")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="page")] = None,
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the observations associated to a specific study

        Get the observations associated to a specific study

        :param study_db_id: studyDbId (required)
        :type study_db_id: str
        :param authorization: Authentication token (required)
        :type authorization: str
        :param observation_variable_db_ids: observationVariableDbIds
        :type observation_variable_db_ids: List[str]
        :param page_size: pageSize
        :type page_size: int
        :param page: page
        :type page: int
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_observations_serialize(
            study_db_id=study_db_id,
            authorization=authorization,
            observation_variable_db_ids=observation_variable_db_ids,
            page_size=page_size,
            page=page,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1ObservationListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_observations_serialize(
        self,
        study_db_id,
        authorization,
        observation_variable_db_ids,
        page_size,
        page,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'observationVariableDbIds': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if study_db_id is not None:
            _path_params['studyDbId'] = study_db_id
        # process the query parameters
        if observation_variable_db_ids is not None:
            
            _query_params.append(('observationVariableDbIds', observation_variable_db_ids))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if accept_language is not None:
            _header_params['Accept-Language'] = accept_language
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/brapi/v1/studies/{studyDbId}/observations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_studies(
        self,
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        study_db_id: Annotated[Optional[StrictStr], Field(description="Search by studyDbId")] = None,
        active: Annotated[Optional[StrictStr], Field(description="Filter active status true/false")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Name of the field to sort by: studyDbId, active")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order direction - ASC or DESC")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page size")] = None,
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BrAPIv1StudyListResponse:
        """Retrieve studies information

        Retrieve studies information

        :param authorization: Authentication token (required)
        :type authorization: str
        :param study_db_id: Search by studyDbId
        :type study_db_id: str
        :param active: Filter active status true/false
        :type active: str
        :param sort_by: Name of the field to sort by: studyDbId, active
        :type sort_by: str
        :param sort_order: Sort order direction - ASC or DESC
        :type sort_order: str
        :param page: Page number
        :type page: int
        :param page_size: Page size
        :type page_size: int
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_studies_serialize(
            authorization=authorization,
            study_db_id=study_db_id,
            active=active,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1StudyListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_studies_with_http_info(
        self,
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        study_db_id: Annotated[Optional[StrictStr], Field(description="Search by studyDbId")] = None,
        active: Annotated[Optional[StrictStr], Field(description="Filter active status true/false")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Name of the field to sort by: studyDbId, active")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order direction - ASC or DESC")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page size")] = None,
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BrAPIv1StudyListResponse]:
        """Retrieve studies information

        Retrieve studies information

        :param authorization: Authentication token (required)
        :type authorization: str
        :param study_db_id: Search by studyDbId
        :type study_db_id: str
        :param active: Filter active status true/false
        :type active: str
        :param sort_by: Name of the field to sort by: studyDbId, active
        :type sort_by: str
        :param sort_order: Sort order direction - ASC or DESC
        :type sort_order: str
        :param page: Page number
        :type page: int
        :param page_size: Page size
        :type page_size: int
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_studies_serialize(
            authorization=authorization,
            study_db_id=study_db_id,
            active=active,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1StudyListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_studies_without_preload_content(
        self,
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        study_db_id: Annotated[Optional[StrictStr], Field(description="Search by studyDbId")] = None,
        active: Annotated[Optional[StrictStr], Field(description="Filter active status true/false")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Name of the field to sort by: studyDbId, active")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order direction - ASC or DESC")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page number")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Page size")] = None,
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve studies information

        Retrieve studies information

        :param authorization: Authentication token (required)
        :type authorization: str
        :param study_db_id: Search by studyDbId
        :type study_db_id: str
        :param active: Filter active status true/false
        :type active: str
        :param sort_by: Name of the field to sort by: studyDbId, active
        :type sort_by: str
        :param sort_order: Sort order direction - ASC or DESC
        :type sort_order: str
        :param page: Page number
        :type page: int
        :param page_size: Page size
        :type page_size: int
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_studies_serialize(
            authorization=authorization,
            study_db_id=study_db_id,
            active=active,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1StudyListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_studies_serialize(
        self,
        authorization,
        study_db_id,
        active,
        sort_by,
        sort_order,
        page,
        page_size,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if study_db_id is not None:
            
            _query_params.append(('studyDbId', study_db_id))
            
        if active is not None:
            
            _query_params.append(('active', active))
            
        if sort_by is not None:
            
            _query_params.append(('sortBy', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sortOrder', sort_order))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if accept_language is not None:
            _header_params['Accept-Language'] = accept_language
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/brapi/v1/studies',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_studies_search(
        self,
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        study_db_id: Annotated[Optional[StrictStr], Field(description="Search by studyDbId")] = None,
        active: Annotated[Optional[StrictStr], Field(description="Filter active status true/false")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Name of the field to sort by: studyDbId or seasonDbId")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order direction - ASC or DESC")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="pageSize")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="page")] = None,
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BrAPIv1StudyListResponse:
        """Retrieve studies information

        Retrieve studies information

        :param authorization: Authentication token (required)
        :type authorization: str
        :param study_db_id: Search by studyDbId
        :type study_db_id: str
        :param active: Filter active status true/false
        :type active: str
        :param sort_by: Name of the field to sort by: studyDbId or seasonDbId
        :type sort_by: str
        :param sort_order: Sort order direction - ASC or DESC
        :type sort_order: str
        :param page_size: pageSize
        :type page_size: int
        :param page: page
        :type page: int
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_studies_search_serialize(
            authorization=authorization,
            study_db_id=study_db_id,
            active=active,
            sort_by=sort_by,
            sort_order=sort_order,
            page_size=page_size,
            page=page,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1StudyListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_studies_search_with_http_info(
        self,
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        study_db_id: Annotated[Optional[StrictStr], Field(description="Search by studyDbId")] = None,
        active: Annotated[Optional[StrictStr], Field(description="Filter active status true/false")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Name of the field to sort by: studyDbId or seasonDbId")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order direction - ASC or DESC")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="pageSize")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="page")] = None,
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BrAPIv1StudyListResponse]:
        """Retrieve studies information

        Retrieve studies information

        :param authorization: Authentication token (required)
        :type authorization: str
        :param study_db_id: Search by studyDbId
        :type study_db_id: str
        :param active: Filter active status true/false
        :type active: str
        :param sort_by: Name of the field to sort by: studyDbId or seasonDbId
        :type sort_by: str
        :param sort_order: Sort order direction - ASC or DESC
        :type sort_order: str
        :param page_size: pageSize
        :type page_size: int
        :param page: page
        :type page: int
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_studies_search_serialize(
            authorization=authorization,
            study_db_id=study_db_id,
            active=active,
            sort_by=sort_by,
            sort_order=sort_order,
            page_size=page_size,
            page=page,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1StudyListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_studies_search_without_preload_content(
        self,
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        study_db_id: Annotated[Optional[StrictStr], Field(description="Search by studyDbId")] = None,
        active: Annotated[Optional[StrictStr], Field(description="Filter active status true/false")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Name of the field to sort by: studyDbId or seasonDbId")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sort order direction - ASC or DESC")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="pageSize")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="page")] = None,
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve studies information

        Retrieve studies information

        :param authorization: Authentication token (required)
        :type authorization: str
        :param study_db_id: Search by studyDbId
        :type study_db_id: str
        :param active: Filter active status true/false
        :type active: str
        :param sort_by: Name of the field to sort by: studyDbId or seasonDbId
        :type sort_by: str
        :param sort_order: Sort order direction - ASC or DESC
        :type sort_order: str
        :param page_size: pageSize
        :type page_size: int
        :param page: page
        :type page: int
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_studies_search_serialize(
            authorization=authorization,
            study_db_id=study_db_id,
            active=active,
            sort_by=sort_by,
            sort_order=sort_order,
            page_size=page_size,
            page=page,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1StudyListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_studies_search_serialize(
        self,
        authorization,
        study_db_id,
        active,
        sort_by,
        sort_order,
        page_size,
        page,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if study_db_id is not None:
            
            _query_params.append(('studyDbId', study_db_id))
            
        if active is not None:
            
            _query_params.append(('active', active))
            
        if sort_by is not None:
            
            _query_params.append(('sortBy', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sortOrder', sort_order))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if accept_language is not None:
            _header_params['Accept-Language'] = accept_language
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/brapi/v1/studies-search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_study_details(
        self,
        study_db_id: Annotated[StrictStr, Field(description="Search by studyDbId")],
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BrAPIv1SingleStudyResponse:
        """Retrieve study details

        Retrieve study details

        :param study_db_id: Search by studyDbId (required)
        :type study_db_id: str
        :param authorization: Authentication token (required)
        :type authorization: str
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_study_details_serialize(
            study_db_id=study_db_id,
            authorization=authorization,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1SingleStudyResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_study_details_with_http_info(
        self,
        study_db_id: Annotated[StrictStr, Field(description="Search by studyDbId")],
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BrAPIv1SingleStudyResponse]:
        """Retrieve study details

        Retrieve study details

        :param study_db_id: Search by studyDbId (required)
        :type study_db_id: str
        :param authorization: Authentication token (required)
        :type authorization: str
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_study_details_serialize(
            study_db_id=study_db_id,
            authorization=authorization,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1SingleStudyResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_study_details_without_preload_content(
        self,
        study_db_id: Annotated[StrictStr, Field(description="Search by studyDbId")],
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve study details

        Retrieve study details

        :param study_db_id: Search by studyDbId (required)
        :type study_db_id: str
        :param authorization: Authentication token (required)
        :type authorization: str
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_study_details_serialize(
            study_db_id=study_db_id,
            authorization=authorization,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1SingleStudyResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_study_details_serialize(
        self,
        study_db_id,
        authorization,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if study_db_id is not None:
            _path_params['studyDbId'] = study_db_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if accept_language is not None:
            _header_params['Accept-Language'] = accept_language
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/brapi/v1/studies/{studyDbId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_variable_details(
        self,
        observation_variable_db_id: Annotated[StrictStr, Field(description="A variable URI (Unique Resource Identifier)")],
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BrAPIv1SingleObservationVariableResponse:
        """Retrieve variable details by id

        Retrieve variable details by id

        :param observation_variable_db_id: A variable URI (Unique Resource Identifier) (required)
        :type observation_variable_db_id: str
        :param authorization: Authentication token (required)
        :type authorization: str
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_variable_details_serialize(
            observation_variable_db_id=observation_variable_db_id,
            authorization=authorization,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1SingleObservationVariableResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_variable_details_with_http_info(
        self,
        observation_variable_db_id: Annotated[StrictStr, Field(description="A variable URI (Unique Resource Identifier)")],
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BrAPIv1SingleObservationVariableResponse]:
        """Retrieve variable details by id

        Retrieve variable details by id

        :param observation_variable_db_id: A variable URI (Unique Resource Identifier) (required)
        :type observation_variable_db_id: str
        :param authorization: Authentication token (required)
        :type authorization: str
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_variable_details_serialize(
            observation_variable_db_id=observation_variable_db_id,
            authorization=authorization,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1SingleObservationVariableResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_variable_details_without_preload_content(
        self,
        observation_variable_db_id: Annotated[StrictStr, Field(description="A variable URI (Unique Resource Identifier)")],
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve variable details by id

        Retrieve variable details by id

        :param observation_variable_db_id: A variable URI (Unique Resource Identifier) (required)
        :type observation_variable_db_id: str
        :param authorization: Authentication token (required)
        :type authorization: str
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_variable_details_serialize(
            observation_variable_db_id=observation_variable_db_id,
            authorization=authorization,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1SingleObservationVariableResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_variable_details_serialize(
        self,
        observation_variable_db_id,
        authorization,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if observation_variable_db_id is not None:
            _path_params['observationVariableDbId'] = observation_variable_db_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if accept_language is not None:
            _header_params['Accept-Language'] = accept_language
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/brapi/v1/variables/{observationVariableDbId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_variables_list(
        self,
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        observation_variable_db_id: Annotated[Optional[StrictStr], Field(description="observationVariableDbId")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="pageSize")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="page")] = None,
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BrAPIv1ObservationVariableListResponse:
        """BrAPIv1CallDTO to retrieve a list of observationVariables available in the system

        retrieve variables information

        :param authorization: Authentication token (required)
        :type authorization: str
        :param observation_variable_db_id: observationVariableDbId
        :type observation_variable_db_id: str
        :param page_size: pageSize
        :type page_size: int
        :param page: page
        :type page: int
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_variables_list_serialize(
            authorization=authorization,
            observation_variable_db_id=observation_variable_db_id,
            page_size=page_size,
            page=page,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1ObservationVariableListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_variables_list_with_http_info(
        self,
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        observation_variable_db_id: Annotated[Optional[StrictStr], Field(description="observationVariableDbId")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="pageSize")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="page")] = None,
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BrAPIv1ObservationVariableListResponse]:
        """BrAPIv1CallDTO to retrieve a list of observationVariables available in the system

        retrieve variables information

        :param authorization: Authentication token (required)
        :type authorization: str
        :param observation_variable_db_id: observationVariableDbId
        :type observation_variable_db_id: str
        :param page_size: pageSize
        :type page_size: int
        :param page: page
        :type page: int
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_variables_list_serialize(
            authorization=authorization,
            observation_variable_db_id=observation_variable_db_id,
            page_size=page_size,
            page=page,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1ObservationVariableListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_variables_list_without_preload_content(
        self,
        authorization: Annotated[StrictStr, Field(description="Authentication token")],
        observation_variable_db_id: Annotated[Optional[StrictStr], Field(description="observationVariableDbId")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="pageSize")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="page")] = None,
        accept_language: Annotated[Optional[StrictStr], Field(description="Request accepted language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """BrAPIv1CallDTO to retrieve a list of observationVariables available in the system

        retrieve variables information

        :param authorization: Authentication token (required)
        :type authorization: str
        :param observation_variable_db_id: observationVariableDbId
        :type observation_variable_db_id: str
        :param page_size: pageSize
        :type page_size: int
        :param page: page
        :type page: int
        :param accept_language: Request accepted language
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_variables_list_serialize(
            authorization=authorization,
            observation_variable_db_id=observation_variable_db_id,
            page_size=page_size,
            page=page,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BrAPIv1ObservationVariableListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_variables_list_serialize(
        self,
        authorization,
        observation_variable_db_id,
        page_size,
        page,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if observation_variable_db_id is not None:
            
            _query_params.append(('observationVariableDbId', observation_variable_db_id))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if accept_language is not None:
            _header_params['Accept-Language'] = accept_language
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/brapi/v1/variables',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


