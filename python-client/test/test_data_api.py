# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.data_api import DataApi


class TestDataApi(unittest.TestCase):
    """DataApi unit test stubs"""

    def setUp(self) -> None:
        self.api = DataApi()

    def tearDown(self) -> None:
        pass

    def test_add_list_data(self) -> None:
        """Test case for add_list_data

        Add data
        """
        pass

    def test_count_data(self) -> None:
        """Test case for count_data

        Count data
        """
        pass

    def test_count_datafiles(self) -> None:
        """Test case for count_datafiles

        Count datafiles
        """
        pass

    def test_create_provenance(self) -> None:
        """Test case for create_provenance

        Add a provenance
        """
        pass

    def test_delete_data(self) -> None:
        """Test case for delete_data

        Delete data
        """
        pass

    def test_delete_data_on_search(self) -> None:
        """Test case for delete_data_on_search

        Delete data on criteria
        """
        pass

    def test_delete_provenance(self) -> None:
        """Test case for delete_provenance

        Delete a provenance that doesn't describe data
        """
        pass

    def test_export_data(self) -> None:
        """Test case for export_data

        Export data
        """
        pass

    def test_export_data1(self) -> None:
        """Test case for export_data1

        Export data
        """
        pass

    def test_get_data(self) -> None:
        """Test case for get_data

        Get data
        """
        pass

    def test_get_data_file(self) -> None:
        """Test case for get_data_file

        Get a data file
        """
        pass

    def test_get_data_file_description(self) -> None:
        """Test case for get_data_file_description

        Get a data file description
        """
        pass

    def test_get_data_file_descriptions_by_search(self) -> None:
        """Test case for get_data_file_descriptions_by_search

        Search data files
        """
        pass

    def test_get_data_file_descriptions_by_targets(self) -> None:
        """Test case for get_data_file_descriptions_by_targets

        Search data files for a large list of targets 
        """
        pass

    def test_get_data_list_by_targets(self) -> None:
        """Test case for get_data_list_by_targets

        Search data for a large list of targets
        """
        pass

    def test_get_data_series_by_facility(self) -> None:
        """Test case for get_data_series_by_facility

        Get all data series associated with a facility
        """
        pass

    def test_get_datafiles_provenances(self) -> None:
        """Test case for get_datafiles_provenances

        Search provenances linked to datafiles
        """
        pass

    def test_get_datafiles_provenances_by_targets(self) -> None:
        """Test case for get_datafiles_provenances_by_targets

        Search provenances linked to datafiles for a large list of targets
        """
        pass

    def test_get_mathematical_operators(self) -> None:
        """Test case for get_mathematical_operators

        Get mathematical operators
        """
        pass

    def test_get_pictures_thumbnails(self) -> None:
        """Test case for get_pictures_thumbnails

        Get a picture thumbnail
        """
        pass

    def test_get_provenance(self) -> None:
        """Test case for get_provenance

        Get a provenance
        """
        pass

    def test_get_provenances_by_uris(self) -> None:
        """Test case for get_provenances_by_uris

        Get a list of provenances by their URIs
        """
        pass

    def test_get_used_provenances(self) -> None:
        """Test case for get_used_provenances

        Search provenances linked to data
        """
        pass

    def test_get_used_provenances_by_targets(self) -> None:
        """Test case for get_used_provenances_by_targets

        Search provenances linked to data for a large list of targets
        """
        pass

    def test_get_used_variables(self) -> None:
        """Test case for get_used_variables

        Get variables linked to data
        """
        pass

    def test_import_csv_data(self) -> None:
        """Test case for import_csv_data

        Import a CSV file for the given provenanceURI
        """
        pass

    def test_post_data_file(self) -> None:
        """Test case for post_data_file

        Add a data file
        """
        pass

    def test_post_data_file_paths(self) -> None:
        """Test case for post_data_file_paths

        Describe datafiles and give their relative paths in the configured storage system. In the case of already stored datafiles.
        """
        pass

    def test_search_data_list(self) -> None:
        """Test case for search_data_list

        Search data
        """
        pass

    def test_search_data_list_by_targets(self) -> None:
        """Test case for search_data_list_by_targets

        Search data for a large list of targets
        """
        pass

    def test_search_provenance(self) -> None:
        """Test case for search_provenance

        Get provenances
        """
        pass

    def test_update(self) -> None:
        """Test case for update

        Update data
        """
        pass

    def test_update_confidence(self) -> None:
        """Test case for update_confidence

        Update confidence index
        """
        pass

    def test_update_provenance(self) -> None:
        """Test case for update_provenance

        Update a provenance
        """
        pass

    def test_validate_csv(self) -> None:
        """Test case for validate_csv

        Import a CSV file for the given provenanceURI.
        """
        pass


if __name__ == '__main__':
    unittest.main()
