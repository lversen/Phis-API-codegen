# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.area_creation_dto import AreaCreationDTO

class TestAreaCreationDTO(unittest.TestCase):
    """AreaCreationDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AreaCreationDTO:
        """Test AreaCreationDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AreaCreationDTO`
        """
        model = AreaCreationDTO()
        if include_optional:
            return AreaCreationDTO(
                uri = 'http://opensilex/set/area/Z_001',
                is_structural_area = True,
                rdf_type = 'vocabulary:WindyArea',
                name = 'Z_001',
                description = 'Protocol nÂ°1289 - Amount of water 5 ml/Days.',
                geometry = {"coordinates":[43.618316,3.856912],"type":"Point"},
                event = openapi_client.models.event_creation_dto.EventCreationDTO(
                    uri = '', 
                    rdf_type = 'http://www.opensilex.org/vocabulary/oeev#Irrigation', 
                    start = '2019-09-08T12:00:00+01:00', 
                    end = '2019-09-08T13:00:00+01:00', 
                    is_instant = True, 
                    description = '2019-09-08T13:00:00+01:00', 
                    targets = [
                        ''
                        ], 
                    relations = [
                        openapi_client.models.rdf_object_relation_dto.RDFObjectRelationDTO(
                            property = '', 
                            value = '', 
                            inverse = True, )
                        ], 
                    publisher = openapi_client.models.user_get_dto.UserGetDTO(
                        uri = 'http://opensilex.dev/users#jean.michel.inrae', 
                        email = 'jean.michel@example.com', 
                        language = 'en', 
                        admin = False, 
                        first_name = 'Jean', 
                        last_name = 'Michel', 
                        linked_person = 'http://opensilex.dev/person#Jean.Michel.mistea', 
                        enable = True, 
                        favorites = test, ), 
                    publication_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_updated_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
            )
        else:
            return AreaCreationDTO(
                is_structural_area = True,
                rdf_type = 'vocabulary:WindyArea',
                name = 'Z_001',
                geometry = {"coordinates":[43.618316,3.856912],"type":"Point"},
        )
        """

    def testAreaCreationDTO(self):
        """Test AreaCreationDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
