# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.faidarev1_observation_variable_list_response import Faidarev1ObservationVariableListResponse

class TestFaidarev1ObservationVariableListResponse(unittest.TestCase):
    """Faidarev1ObservationVariableListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Faidarev1ObservationVariableListResponse:
        """Test Faidarev1ObservationVariableListResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Faidarev1ObservationVariableListResponse`
        """
        model = Faidarev1ObservationVariableListResponse()
        if include_optional:
            return Faidarev1ObservationVariableListResponse(
                metadata = openapi_client.models.metadata_dto.MetadataDTO(
                    pagination = openapi_client.models.pagination_dto.PaginationDTO(
                        page_size = 56, 
                        current_page = 56, 
                        total_count = 56, 
                        total_pages = 56, 
                        limit_count = 56, 
                        has_next_page = True, ), 
                    status = [
                        openapi_client.models.status_dto.StatusDTO(
                            message = '', 
                            translation_key = '', 
                            translation_values = {
                                'key' : ''
                                }, 
                            level = 'ERROR', )
                        ], 
                    datafiles = [
                        ''
                        ], ),
                result = openapi_client.models.brapi_data_response_part_list_faidarev1_observation_variable_dto.BrapiDataResponsePartListFaidarev1ObservationVariableDTO(
                    data = [
                        openapi_client.models.faidarev1_observation_variable_dto.Faidarev1ObservationVariableDTO(
                            context_of_use = [
                                ''
                                ], 
                            crop = '', 
                            default_value = '', 
                            documentation_url = '', 
                            growth_stage = '', 
                            institution = '', 
                            language = '', 
                            method = openapi_client.models.faidarev1_method_dto.Faidarev1MethodDTO(
                                description = '', 
                                formula = '', 
                                method_db_id = '', 
                                name = '', 
                                reference = '', 
                                class = '', ), 
                            scale = openapi_client.models.faidarev1_scale_dto.Faidarev1ScaleDTO(
                                data_type = '', 
                                decimal_places = '', 
                                scale_db_id = '', 
                                name = '', 
                                valid_values = '', 
                                xref = '', ), 
                            scientist = '', 
                            status = '', 
                            synonyms = [
                                ''
                                ], 
                            trait = openapi_client.models.faidarev1_trait_dto.Faidarev1TraitDTO(
                                trait_db_id = '', 
                                name = '', 
                                description = '', 
                                main_abbreviation = '', 
                                alternative_abbreviations = [
                                    ''
                                    ], 
                                entity = '', 
                                attribute = '', 
                                status = '', 
                                xref = '', 
                                class = '', ), 
                            xref = '', 
                            observation_variable_db_id = '', 
                            name = '', 
                            date = '', 
                            ontology_db_id = '', 
                            ontology_name = '', )
                        ], )
            )
        else:
            return Faidarev1ObservationVariableListResponse(
        )
        """

    def testFaidarev1ObservationVariableListResponse(self):
        """Test Faidarev1ObservationVariableListResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
