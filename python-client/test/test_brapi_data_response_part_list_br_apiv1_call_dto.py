# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.brapi_data_response_part_list_br_apiv1_call_dto import BrapiDataResponsePartListBrAPIv1CallDTO

class TestBrapiDataResponsePartListBrAPIv1CallDTO(unittest.TestCase):
    """BrapiDataResponsePartListBrAPIv1CallDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BrapiDataResponsePartListBrAPIv1CallDTO:
        """Test BrapiDataResponsePartListBrAPIv1CallDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BrapiDataResponsePartListBrAPIv1CallDTO`
        """
        model = BrapiDataResponsePartListBrAPIv1CallDTO()
        if include_optional:
            return BrapiDataResponsePartListBrAPIv1CallDTO(
                data = [
                    openapi_client.models.br_apiv1_call_dto.BrAPIv1CallDTO(
                        call = '', 
                        data_types = [
                            ''
                            ], 
                        methods = [
                            ''
                            ], 
                        versions = [
                            ''
                            ], )
                    ]
            )
        else:
            return BrapiDataResponsePartListBrAPIv1CallDTO(
        )
        """

    def testBrapiDataResponsePartListBrAPIv1CallDTO(self):
        """Test BrapiDataResponsePartListBrAPIv1CallDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
