# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.data_csv_validation_model import DataCSVValidationModel

class TestDataCSVValidationModel(unittest.TestCase):
    """DataCSVValidationModel unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DataCSVValidationModel:
        """Test DataCSVValidationModel
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DataCSVValidationModel`
        """
        model = DataCSVValidationModel()
        if include_optional:
            return DataCSVValidationModel(
                missing_headers = [
                    ''
                    ],
                empty_headers = [
                    56
                    ],
                invalid_header_uris = {
                    'key' : ''
                    },
                datatype_errors = {
                    'key' : [
                        openapi_client.models.csv_datatype_error.CSVDatatypeError(
                            row_index = 56, 
                            col_index = 56, 
                            header = '', 
                            value = '', 
                            datatype = '', 
                            message = '', )
                        ]
                    },
                uri_not_found_errors = {
                    'key' : [
                        openapi_client.models.csvuri_not_found_error.CSVURINotFoundError(
                            row_index = 56, 
                            col_index = 56, 
                            header = '', 
                            value = '', 
                            rdf_type = '', 
                            object_uri = '', 
                            message = '', )
                        ]
                    },
                invalid_uri_errors = {
                    'key' : [
                        openapi_client.models.csv_cell.CSVCell(
                            row_index = 56, 
                            col_index = 56, 
                            header = '', 
                            value = '', 
                            message = '', )
                        ]
                    },
                missing_required_value_errors = {
                    'key' : [
                        openapi_client.models.csv_cell.CSVCell(
                            row_index = 56, 
                            col_index = 56, 
                            header = '', 
                            value = '', 
                            message = '', )
                        ]
                    },
                invalid_value_errors = {
                    'key' : [
                        openapi_client.models.csv_cell.CSVCell(
                            row_index = 56, 
                            col_index = 56, 
                            header = '', 
                            value = '', 
                            message = '', )
                        ]
                    },
                already_existing_uri_errors = {
                    'key' : [
                        openapi_client.models.csv_cell.CSVCell(
                            row_index = 56, 
                            col_index = 56, 
                            header = '', 
                            value = '', 
                            message = '', )
                        ]
                    },
                duplicate_uri_errors = {
                    'key' : [
                        openapi_client.models.csv_duplicate_uri_error.CSVDuplicateURIError(
                            row_index = 56, 
                            col_index = 56, 
                            header = '', 
                            value = '', 
                            previous_row = 56, 
                            message = '', )
                        ]
                    },
                invalid_row_size_errors = {
                    'key' : [
                        openapi_client.models.csv_cell.CSVCell(
                            row_index = 56, 
                            col_index = 56, 
                            header = '', 
                            value = '', 
                            message = '', )
                        ]
                    },
                invalid_date_errors = {
                    'key' : [
                        openapi_client.models.csv_cell.CSVCell(
                            row_index = 56, 
                            col_index = 56, 
                            header = '', 
                            value = '', 
                            message = '', )
                        ]
                    },
                nb_object_imported = 56,
                validation_token = '',
                csv_header = openapi_client.models.csv_header.CsvHeader(
                    columns = [
                        ''
                        ], 
                    real_csv_header_length = 56, ),
                invalid_object_errors = {
                    'key' : [
                        openapi_client.models.csv_cell.CSVCell(
                            row_index = 56, 
                            col_index = 56, 
                            header = '', 
                            value = '', 
                            message = '', )
                        ]
                    },
                invalid_annotation_errors = {
                    'key' : [
                        openapi_client.models.csv_cell.CSVCell(
                            row_index = 56, 
                            col_index = 56, 
                            header = '', 
                            value = '', 
                            message = '', )
                        ]
                    },
                invalid_target_errors = {
                    'key' : [
                        openapi_client.models.csv_cell.CSVCell(
                            row_index = 56, 
                            col_index = 56, 
                            header = '', 
                            value = '', 
                            message = '', )
                        ]
                    },
                invalid_data_type_errors = {
                    'key' : [
                        openapi_client.models.csv_cell.CSVCell(
                            row_index = 56, 
                            col_index = 56, 
                            header = '', 
                            value = '', 
                            message = '', )
                        ]
                    },
                invalid_experiment_errors = {
                    'key' : [
                        openapi_client.models.csv_cell.CSVCell(
                            row_index = 56, 
                            col_index = 56, 
                            header = '', 
                            value = '', 
                            message = '', )
                        ]
                    },
                invalid_device_errors = {
                    'key' : [
                        openapi_client.models.csv_cell.CSVCell(
                            row_index = 56, 
                            col_index = 56, 
                            header = '', 
                            value = '', 
                            message = '', )
                        ]
                    },
                device_choice_ambiguity_errors = {
                    'key' : [
                        openapi_client.models.csv_cell.CSVCell(
                            row_index = 56, 
                            col_index = 56, 
                            header = '', 
                            value = '', 
                            message = '', )
                        ]
                    },
                duplicated_data_errors = {
                    'key' : [
                        openapi_client.models.csv_cell.CSVCell(
                            row_index = 56, 
                            col_index = 56, 
                            header = '', 
                            value = '', 
                            message = '', )
                        ]
                    },
                duplicated_object_errors = {
                    'key' : [
                        openapi_client.models.csv_cell.CSVCell(
                            row_index = 56, 
                            col_index = 56, 
                            header = '', 
                            value = '', 
                            message = '', )
                        ]
                    },
                duplicated_target_errors = {
                    'key' : [
                        openapi_client.models.csv_cell.CSVCell(
                            row_index = 56, 
                            col_index = 56, 
                            header = '', 
                            value = '', 
                            message = '', )
                        ]
                    },
                duplicated_experiment_errors = {
                    'key' : [
                        openapi_client.models.csv_cell.CSVCell(
                            row_index = 56, 
                            col_index = 56, 
                            header = '', 
                            value = '', 
                            message = '', )
                        ]
                    },
                duplicated_device_errors = {
                    'key' : [
                        openapi_client.models.csv_cell.CSVCell(
                            row_index = 56, 
                            col_index = 56, 
                            header = '', 
                            value = '', 
                            message = '', )
                        ]
                    },
                headers = [
                    ''
                    ],
                headers_labels = [
                    ''
                    ],
                annotations_on_objects = [
                    openapi_client.models.annotation_model.AnnotationModel(
                        uri = '', 
                        publisher = '', 
                        publication_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_update_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        relations = [
                            openapi_client.models.sparql_model_relation.SPARQLModelRelation(
                                graph = '', 
                                property = openapi_client.models.property.Property(
                                    local_name = '', 
                                    name_space = '', 
                                    ordinal = 56, 
                                    id = openapi_client.models.anon_id.AnonId(
                                        blank_node_id = openapi_client.models.blank_node_id.BlankNodeId(
                                            label_string = '', ), 
                                        label_string = '', ), 
                                    uri = '', 
                                    stmt_term = openapi_client.models.statement.Statement(
                                        boolean = True, 
                                        byte = 'YQ==', 
                                        short = 56, 
                                        char = '', 
                                        int = 56, 
                                        long = 56, 
                                        float = 1.337, 
                                        double = 1.337, 
                                        resource = openapi_client.models.resource.Resource(
                                            uri = '', 
                                            local_name = '', 
                                            name_space = '', 
                                            model = openapi_client.models.model.Model(
                                                empty = True, 
                                                closed = True, 
                                                reader = openapi_client.models.rdf_reader_i.RDFReaderI(), 
                                                lock = openapi_client.models.lock.Lock(), 
                                                writer = openapi_client.models.rdf_writer_i.RDFWriterI(), 
                                                graph = openapi_client.models.graph.Graph(
                                                    empty = True, 
                                                    closed = True, 
                                                    prefix_mapping = openapi_client.models.prefix_mapping.PrefixMapping(
                                                        ns_prefix_map = {
                                                            'key' : ''
                                                            }, ), 
                                                    transaction_handler = openapi_client.models.transaction_handler.TransactionHandler(), 
                                                    event_manager = openapi_client.models.graph_event_manager.GraphEventManager(), 
                                                    capabilities = openapi_client.models.capabilities.Capabilities(), ), 
                                                ns_prefix_map = {
                                                    'key' : ''
                                                    }, ), 
                                            literal = True, 
                                            anon = True, 
                                            uriresource = True, 
                                            stmt_resource = True, ), 
                                        object = openapi_client.models.rdf_node.RDFNode(
                                            literal = True, 
                                            anon = True, 
                                            uriresource = True, 
                                            stmt_resource = True, ), 
                                        language = '', 
                                        string = '', 
                                        list = openapi_client.models.rdf_list.RDFList(
                                            empty = True, 
                                            strict = True, 
                                            valid = True, 
                                            validity_error_message = '', 
                                            head = openapi_client.models.rdf_node.RDFNode(
                                                literal = True, 
                                                anon = True, 
                                                uriresource = True, 
                                                stmt_resource = True, ), 
                                            tail = openapi_client.models.rdf_list.RDFList(
                                                empty = True, 
                                                strict = True, 
                                                valid = True, 
                                                validity_error_message = '', 
                                                uri = '', 
                                                local_name = '', 
                                                name_space = '', 
                                                literal = True, 
                                                anon = True, 
                                                uriresource = True, 
                                                stmt_resource = True, ), 
                                            uri = '', 
                                            local_name = '', 
                                            name_space = '', 
                                            literal = True, 
                                            anon = True, 
                                            uriresource = True, 
                                            stmt_resource = True, ), 
                                        model = openapi_client.models.model.Model(
                                            empty = True, 
                                            closed = True, ), 
                                        subject = openapi_client.models.resource.Resource(
                                            uri = '', 
                                            local_name = '', 
                                            name_space = '', 
                                            literal = True, 
                                            anon = True, 
                                            uriresource = True, 
                                            stmt_resource = True, ), 
                                        literal = openapi_client.models.literal.Literal(
                                            boolean = True, 
                                            byte = 'YQ==', 
                                            short = 56, 
                                            char = '', 
                                            int = 56, 
                                            long = 56, 
                                            float = 1.337, 
                                            double = 1.337, 
                                            value = openapi_client.models.value.value(), 
                                            language = '', 
                                            string = '', 
                                            well_formed_xml = True, 
                                            datatype = openapi_client.models.rdf_datatype.RDFDatatype(
                                                uri = '', ), 
                                            datatype_uri = '', 
                                            lexical_form = '', 
                                            anon = True, 
                                            uriresource = True, 
                                            stmt_resource = True, ), 
                                        bag = openapi_client.models.bag.Bag(
                                            alt = True, 
                                            seq = True, 
                                            uri = '', 
                                            local_name = '', 
                                            name_space = '', 
                                            anon = True, 
                                            uriresource = True, 
                                            stmt_resource = True, ), 
                                        alt = openapi_client.models.alt.Alt(
                                            default = , 
                                            default_language = '', 
                                            default_resource = , 
                                            default_literal = openapi_client.models.literal.Literal(
                                                boolean = True, 
                                                byte = 'YQ==', 
                                                short = 56, 
                                                char = '', 
                                                int = 56, 
                                                long = 56, 
                                                float = 1.337, 
                                                double = 1.337, 
                                                value = openapi_client.models.value.value(), 
                                                language = '', 
                                                string = '', 
                                                well_formed_xml = True, 
                                                datatype_uri = '', 
                                                lexical_form = '', 
                                                anon = True, 
                                                uriresource = True, 
                                                stmt_resource = True, ), 
                                            default_boolean = True, 
                                            default_byte = 'YQ==', 
                                            default_short = 56, 
                                            default_int = 56, 
                                            default_long = 56, 
                                            default_char = '', 
                                            default_float = 1.337, 
                                            default_double = 1.337, 
                                            default_string = '', 
                                            default_alt = openapi_client.models.alt.Alt(
                                                default_language = '', 
                                                default_boolean = True, 
                                                default_byte = 'YQ==', 
                                                default_short = 56, 
                                                default_int = 56, 
                                                default_long = 56, 
                                                default_char = '', 
                                                default_float = 1.337, 
                                                default_double = 1.337, 
                                                default_string = '', 
                                                default_bag = openapi_client.models.bag.Bag(
                                                    seq = True, 
                                                    uri = '', 
                                                    local_name = '', 
                                                    name_space = '', 
                                                    anon = True, 
                                                    uriresource = True, 
                                                    stmt_resource = True, ), 
                                                default_seq = openapi_client.models.seq.Seq(
                                                    seq = True, 
                                                    uri = '', 
                                                    local_name = '', 
                                                    name_space = '', 
                                                    anon = True, 
                                                    uriresource = True, 
                                                    stmt_resource = True, ), 
                                                seq = True, 
                                                uri = '', 
                                                local_name = '', 
                                                name_space = '', 
                                                anon = True, 
                                                uriresource = True, 
                                                stmt_resource = True, ), 
                                            default_bag = , 
                                            default_seq = openapi_client.models.seq.Seq(
                                                seq = True, 
                                                uri = '', 
                                                local_name = '', 
                                                name_space = '', 
                                                anon = True, 
                                                uriresource = True, 
                                                stmt_resource = True, ), 
                                            seq = True, 
                                            uri = '', 
                                            local_name = '', 
                                            name_space = '', 
                                            anon = True, 
                                            uriresource = True, 
                                            stmt_resource = True, ), 
                                        seq = , 
                                        predicate = openapi_client.models.property.Property(
                                            local_name = '', 
                                            name_space = '', 
                                            ordinal = 56, 
                                            uri = '', 
                                            anon = True, 
                                            uriresource = True, 
                                            stmt_resource = True, ), 
                                        reified = True, ), 
                                    resource = True, 
                                    model = , 
                                    literal = True, 
                                    anon = True, 
                                    uriresource = True, 
                                    stmt_resource = True, ), 
                                value = '', 
                                reverse = True, )
                            ], 
                        description = '', 
                        motivation = openapi_client.models.motivation_model.MotivationModel(
                            uri = '', 
                            publisher = '', 
                            publication_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_update_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            name = '', 
                            type = '', 
                            type_label = openapi_client.models.sparql_label.SPARQLLabel(
                                default_value = '', 
                                default_lang = '', 
                                translations = {
                                    'key' : ''
                                    }, 
                                all_translations = {
                                    'key' : ''
                                    }, ), ), 
                        targets = [
                            ''
                            ], 
                        type = '', 
                        type_label = openapi_client.models.sparql_label.SPARQLLabel(
                            default_value = '', 
                            default_lang = '', ), )
                    ],
                nb_lines_imported = 56,
                nb_lines_to_import = 56,
                validation_step = True,
                insertion_step = True,
                valid_csv = True,
                too_large_dataset = True,
                error_message = ''
            )
        else:
            return DataCSVValidationModel(
        )
        """

    def testDataCSVValidationModel(self):
        """Test DataCSVValidationModel"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
