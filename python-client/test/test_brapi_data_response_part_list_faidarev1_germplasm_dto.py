# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.brapi_data_response_part_list_faidarev1_germplasm_dto import BrapiDataResponsePartListFaidarev1GermplasmDTO

class TestBrapiDataResponsePartListFaidarev1GermplasmDTO(unittest.TestCase):
    """BrapiDataResponsePartListFaidarev1GermplasmDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BrapiDataResponsePartListFaidarev1GermplasmDTO:
        """Test BrapiDataResponsePartListFaidarev1GermplasmDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BrapiDataResponsePartListFaidarev1GermplasmDTO`
        """
        model = BrapiDataResponsePartListFaidarev1GermplasmDTO()
        if include_optional:
            return BrapiDataResponsePartListFaidarev1GermplasmDTO(
                data = [
                    openapi_client.models.faidarev1_germplasm_dto.Faidarev1GermplasmDTO(
                        accession_number = '', 
                        acquisition_date = '', 
                        biological_status_of_accession_code = 56, 
                        common_crop_name = '', 
                        country_of_origin_code = '', 
                        default_display_name = '', 
                        documentation_url = '', 
                        donors = [
                            None
                            ], 
                        genus = '', 
                        germplasm_db_id = '', 
                        germplasm_name = '', 
                        germplasm_pui = '', 
                        institute_code = '', 
                        institute_name = '', 
                        pedigree = '', 
                        seed_source = '', 
                        species = '', 
                        species_authority = '', 
                        subtaxa = '', 
                        subtaxa_authority = '', 
                        synonyms = [
                            ''
                            ], 
                        taxon_ids = [
                            None
                            ], 
                        type_of_germplasm_storage_code = [
                            ''
                            ], 
                        study_db_ib = [
                            ''
                            ], )
                    ]
            )
        else:
            return BrapiDataResponsePartListFaidarev1GermplasmDTO(
        )
        """

    def testBrapiDataResponsePartListFaidarev1GermplasmDTO(self):
        """Test BrapiDataResponsePartListFaidarev1GermplasmDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
