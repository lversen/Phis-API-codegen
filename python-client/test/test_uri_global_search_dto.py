# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.uri_global_search_dto import URIGlobalSearchDTO

class TestURIGlobalSearchDTO(unittest.TestCase):
    """URIGlobalSearchDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> URIGlobalSearchDTO:
        """Test URIGlobalSearchDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `URIGlobalSearchDTO`
        """
        model = URIGlobalSearchDTO()
        if include_optional:
            return URIGlobalSearchDTO(
                uri = '',
                name = '',
                context = '',
                var_property = True,
                rdf_type = '',
                rdf_type_name = '',
                rdfs_comment = '',
                publisher = openapi_client.models.user_get_dto.UserGetDTO(
                    uri = 'http://opensilex.dev/users#jean.michel.inrae', 
                    email = 'jean.michel@example.com', 
                    language = 'en', 
                    admin = False, 
                    first_name = 'Jean', 
                    last_name = 'Michel', 
                    linked_person = 'http://opensilex.dev/person#Jean.Michel.mistea', 
                    enable = True, 
                    favorites = test, ),
                publication_date = '',
                last_updated_date = '',
                super_types = openapi_client.models.uri_types_dto.URITypesDTO(
                    uri = '', 
                    rdf_types = [
                        ''
                        ], ),
                data_dto = openapi_client.models.data_get_search_dto.DataGetSearchDTO(
                    uri = 'http://opensilex.dev/id/data/1598857852858', 
                    date = '2020-08-21T00:00:00+01:00', 
                    target = 'http://plot01', 
                    variable = 'http://opensilex.dev/variable#variable.2020-08-21_11-21-23entity6_method6_quality6_unit6', 
                    value = 8.6, 
                    confidence = 0.5, 
                    provenance = openapi_client.models.data_provenance_model.DataProvenanceModel(
                        uri = 'http://opensilex.dev/id/provenance/provenancelabel', 
                        prov_used = [
                            openapi_client.models.prov_entity_model.ProvEntityModel(
                                uri = '', 
                                rdf_type = '', )
                            ], 
                        prov_was_associated_with = [
                            openapi_client.models.prov_entity_model.ProvEntityModel(
                                uri = '', 
                                rdf_type = '', )
                            ], 
                        settings = {
                            'key' : None
                            }, 
                        experiments = [
                            ''
                            ], ), 
                    metadata = { "LabelView" : "side90",
"paramA" : "90"}, 
                    publisher = '', 
                    raw_data = [
                        None
                        ], 
                    issued = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                datafile_dto = openapi_client.models.data_file_get_dto.DataFileGetDTO(
                    uri = '', 
                    rdf_type = 'http://www.opensilex.org/vocabulary/oeso#Image', 
                    date = '2020-08-21T00:00:00+01:00', 
                    timezone = 'Europe/Paris', 
                    target = '', 
                    provenance = openapi_client.models.data_provenance_model.DataProvenanceModel(
                        uri = 'http://opensilex.dev/id/provenance/provenancelabel', 
                        prov_used = [
                            openapi_client.models.prov_entity_model.ProvEntityModel(
                                uri = '', 
                                rdf_type = '', )
                            ], 
                        prov_was_associated_with = [
                            openapi_client.models.prov_entity_model.ProvEntityModel(
                                uri = '', 
                                rdf_type = '', )
                            ], 
                        settings = {
                            'key' : None
                            }, 
                        experiments = [
                            ''
                            ], ), 
                    metadata = { "LabelView" : "side90",
"paramA" : "90"}, 
                    archive = '', 
                    filename = '', 
                    publisher = openapi_client.models.user_get_dto.UserGetDTO(
                        uri = 'http://opensilex.dev/users#jean.michel.inrae', 
                        email = 'jean.michel@example.com', 
                        language = 'en', 
                        admin = False, 
                        first_name = 'Jean', 
                        last_name = 'Michel', 
                        linked_person = 'http://opensilex.dev/person#Jean.Michel.mistea', 
                        enable = True, 
                        favorites = test, ), 
                    issued = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                root_class = '',
                is_property = True,
                factor_uri = ''
            )
        else:
            return URIGlobalSearchDTO(
        )
        """

    def testURIGlobalSearchDTO(self):
        """Test URIGlobalSearchDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
