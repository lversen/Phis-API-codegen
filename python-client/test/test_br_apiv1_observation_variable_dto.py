# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.br_apiv1_observation_variable_dto import BrAPIv1ObservationVariableDTO

class TestBrAPIv1ObservationVariableDTO(unittest.TestCase):
    """BrAPIv1ObservationVariableDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BrAPIv1ObservationVariableDTO:
        """Test BrAPIv1ObservationVariableDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BrAPIv1ObservationVariableDTO`
        """
        model = BrAPIv1ObservationVariableDTO()
        if include_optional:
            return BrAPIv1ObservationVariableDTO(
                context_of_use = [
                    ''
                    ],
                crop = '',
                default_value = '',
                documentation_url = '',
                growth_stage = '',
                institution = '',
                language = '',
                method = openapi_client.models.br_apiv1_method_dto.BrAPIv1MethodDTO(
                    description = '', 
                    formula = '', 
                    method_db_id = '', 
                    method_name = '', 
                    ontology_reference = openapi_client.models.br_apiv1_ontology_reference_dto.BrAPIv1OntologyReferenceDTO(
                        documentation_links = [
                            openapi_client.models.br_apiv1_documentation_link_dto.BrAPIv1DocumentationLinkDTO(
                                type = '', 
                                url = '', )
                            ], 
                        ontology_db_id = '', 
                        ontology_name = '', 
                        version = '', ), 
                    reference = '', 
                    class = '', ),
                ontology_reference = openapi_client.models.br_apiv1_ontology_reference_dto.BrAPIv1OntologyReferenceDTO(
                    documentation_links = [
                        openapi_client.models.br_apiv1_documentation_link_dto.BrAPIv1DocumentationLinkDTO(
                            type = '', 
                            url = '', )
                        ], 
                    ontology_db_id = '', 
                    ontology_name = '', 
                    version = '', ),
                scale = openapi_client.models.br_apiv1_scale_dto.BrAPIv1ScaleDTO(
                    data_type = '', 
                    decimal_places = '', 
                    ontology_reference = openapi_client.models.br_apiv1_ontology_reference_dto.BrAPIv1OntologyReferenceDTO(
                        documentation_links = [
                            openapi_client.models.br_apiv1_documentation_link_dto.BrAPIv1DocumentationLinkDTO(
                                type = '', 
                                url = '', )
                            ], 
                        ontology_db_id = '', 
                        ontology_name = '', 
                        version = '', ), 
                    scale_db_id = '', 
                    scale_name = '', 
                    valid_values = '', 
                    xref = '', ),
                scientist = '',
                status = '',
                submission_timestamp = '',
                synonyms = [
                    ''
                    ],
                trait = openapi_client.models.br_apiv1_trait_dto.BrAPIv1TraitDTO(
                    alternative_abbreviations = [
                        ''
                        ], 
                    attribute = '', 
                    description = '', 
                    entity = '', 
                    main_abbreviation = '', 
                    ontology_reference = openapi_client.models.br_apiv1_ontology_reference_dto.BrAPIv1OntologyReferenceDTO(
                        documentation_links = [
                            openapi_client.models.br_apiv1_documentation_link_dto.BrAPIv1DocumentationLinkDTO(
                                type = '', 
                                url = '', )
                            ], 
                        ontology_db_id = '', 
                        ontology_name = '', 
                        version = '', ), 
                    status = '', 
                    synonyms = [
                        ''
                        ], 
                    trait_db_id = '', 
                    trait_name = '', 
                    xref = '', 
                    class = '', ),
                xref = '',
                observation_variable_db_id = '',
                observation_variable_name = '',
                study_db_id = '',
                trial_name = ''
            )
        else:
            return BrAPIv1ObservationVariableDTO(
        )
        """

    def testBrAPIv1ObservationVariableDTO(self):
        """Test BrAPIv1ObservationVariableDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
