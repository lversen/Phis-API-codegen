# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.brapi_data_response_part_list_faidarev1_observation_variable_dto import BrapiDataResponsePartListFaidarev1ObservationVariableDTO

class TestBrapiDataResponsePartListFaidarev1ObservationVariableDTO(unittest.TestCase):
    """BrapiDataResponsePartListFaidarev1ObservationVariableDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BrapiDataResponsePartListFaidarev1ObservationVariableDTO:
        """Test BrapiDataResponsePartListFaidarev1ObservationVariableDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BrapiDataResponsePartListFaidarev1ObservationVariableDTO`
        """
        model = BrapiDataResponsePartListFaidarev1ObservationVariableDTO()
        if include_optional:
            return BrapiDataResponsePartListFaidarev1ObservationVariableDTO(
                data = [
                    openapi_client.models.faidarev1_observation_variable_dto.Faidarev1ObservationVariableDTO(
                        context_of_use = [
                            ''
                            ], 
                        crop = '', 
                        default_value = '', 
                        documentation_url = '', 
                        growth_stage = '', 
                        institution = '', 
                        language = '', 
                        method = openapi_client.models.faidarev1_method_dto.Faidarev1MethodDTO(
                            description = '', 
                            formula = '', 
                            method_db_id = '', 
                            name = '', 
                            reference = '', 
                            class = '', ), 
                        scale = openapi_client.models.faidarev1_scale_dto.Faidarev1ScaleDTO(
                            data_type = '', 
                            decimal_places = '', 
                            scale_db_id = '', 
                            name = '', 
                            valid_values = '', 
                            xref = '', ), 
                        scientist = '', 
                        status = '', 
                        synonyms = [
                            ''
                            ], 
                        trait = openapi_client.models.faidarev1_trait_dto.Faidarev1TraitDTO(
                            trait_db_id = '', 
                            name = '', 
                            description = '', 
                            main_abbreviation = '', 
                            alternative_abbreviations = [
                                ''
                                ], 
                            entity = '', 
                            attribute = '', 
                            status = '', 
                            xref = '', 
                            class = '', ), 
                        xref = '', 
                        observation_variable_db_id = '', 
                        name = '', 
                        date = '', 
                        ontology_db_id = '', 
                        ontology_name = '', )
                    ]
            )
        else:
            return BrapiDataResponsePartListFaidarev1ObservationVariableDTO(
        )
        """

    def testBrapiDataResponsePartListFaidarev1ObservationVariableDTO(self):
        """Test BrapiDataResponsePartListFaidarev1ObservationVariableDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
