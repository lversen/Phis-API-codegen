# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.faidarev1_germplasm_list_response import Faidarev1GermplasmListResponse

class TestFaidarev1GermplasmListResponse(unittest.TestCase):
    """Faidarev1GermplasmListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Faidarev1GermplasmListResponse:
        """Test Faidarev1GermplasmListResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Faidarev1GermplasmListResponse`
        """
        model = Faidarev1GermplasmListResponse()
        if include_optional:
            return Faidarev1GermplasmListResponse(
                metadata = openapi_client.models.metadata_dto.MetadataDTO(
                    pagination = openapi_client.models.pagination_dto.PaginationDTO(
                        page_size = 56, 
                        current_page = 56, 
                        total_count = 56, 
                        total_pages = 56, 
                        limit_count = 56, 
                        has_next_page = True, ), 
                    status = [
                        openapi_client.models.status_dto.StatusDTO(
                            message = '', 
                            translation_key = '', 
                            translation_values = {
                                'key' : ''
                                }, 
                            level = 'ERROR', )
                        ], 
                    datafiles = [
                        ''
                        ], ),
                result = openapi_client.models.brapi_data_response_part_list_faidarev1_germplasm_dto.BrapiDataResponsePartListFaidarev1GermplasmDTO(
                    data = [
                        openapi_client.models.faidarev1_germplasm_dto.Faidarev1GermplasmDTO(
                            accession_number = '', 
                            acquisition_date = '', 
                            biological_status_of_accession_code = 56, 
                            common_crop_name = '', 
                            country_of_origin_code = '', 
                            default_display_name = '', 
                            documentation_url = '', 
                            donors = [
                                None
                                ], 
                            genus = '', 
                            germplasm_db_id = '', 
                            germplasm_name = '', 
                            germplasm_pui = '', 
                            institute_code = '', 
                            institute_name = '', 
                            pedigree = '', 
                            seed_source = '', 
                            species = '', 
                            species_authority = '', 
                            subtaxa = '', 
                            subtaxa_authority = '', 
                            synonyms = [
                                ''
                                ], 
                            taxon_ids = [
                                None
                                ], 
                            type_of_germplasm_storage_code = [
                                ''
                                ], 
                            study_db_ib = [
                                ''
                                ], )
                        ], )
            )
        else:
            return Faidarev1GermplasmListResponse(
        )
        """

    def testFaidarev1GermplasmListResponse(self):
        """Test Faidarev1GermplasmListResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
