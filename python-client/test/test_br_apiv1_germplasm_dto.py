# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.4.7-rdg
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.br_apiv1_germplasm_dto import BrAPIv1GermplasmDTO

class TestBrAPIv1GermplasmDTO(unittest.TestCase):
    """BrAPIv1GermplasmDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BrAPIv1GermplasmDTO:
        """Test BrAPIv1GermplasmDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BrAPIv1GermplasmDTO`
        """
        model = BrAPIv1GermplasmDTO()
        if include_optional:
            return BrAPIv1GermplasmDTO(
                accession_number = '',
                acquisition_date = '',
                biological_status_of_accession_code = 56,
                breeding_method_db_id = '',
                common_crop_name = '',
                country_of_origin_code = '',
                default_display_name = '',
                documentation_url = '',
                donors = [
                    None
                    ],
                germplasm_db_id = '',
                germplasm_genus = '',
                germplasm_name = '',
                germplasm_pui = '',
                germplasm_species = '',
                institute_code = '',
                institute_name = '',
                pedigree = '',
                seed_source = '',
                species_authority = '',
                subtaxa = '',
                subtaxa_authority = '',
                synonyms = [
                    ''
                    ],
                taxon_ids = [
                    None
                    ],
                source_name = '',
                taxon_id = '',
                type_of_germplasm_storage_code = [
                    ''
                    ]
            )
        else:
            return BrAPIv1GermplasmDTO(
        )
        """

    def testBrAPIv1GermplasmDTO(self):
        """Test BrAPIv1GermplasmDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
